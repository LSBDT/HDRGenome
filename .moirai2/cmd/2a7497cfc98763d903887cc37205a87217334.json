{"https://moirai2.github.io/schema/daemon/bash":["annotation.pl $stats $cytoband $gencode $chrominfo js/tablesort-min.js > $html","filename=`basename $stats .out`"],"https://moirai2.github.io/schema/daemon/input":["chrominfo","cytoband","gencode","genome","hdr","project","stats"],"https://moirai2.github.io/schema/daemon/approximate/time":"1","https://moirai2.github.io/schema/daemon/output":"html","https://moirai2.github.io/schema/daemon/query/in":["$project->annotation#genome->$genome","$genome->chrominfo->$chrominfo","$genome->cytoband->$cytoband","$genome->gencode->$gencode","$hdr->$project/stats->$stats"],"https://moirai2.github.io/schema/daemon/query/out":"$stats->$project/html->$html","https://moirai2.github.io/schema/daemon/dagdb":"db","https://moirai2.github.io/schema/daemon/script":{"https://moirai2.github.io/schema/daemon/script/code":["#!/usr/bin/perl","use strict 'vars';","use Cwd;","use File::Basename;","use File::Temp qw/tempfile tempdir/;","use FileHandle;","use Getopt::Std;","use IO::File;","use Time::localtime;","############################## HEADER ##############################","my ($program_name,$program_directory,$program_suffix)=fileparse($0);","$program_directory=Cwd::abs_path($program_directory);","my $program_path=\"$program_directory/$program_name\";","my $program_version=\"2023/11/08\";","############################## OPTIONS ##############################","use vars qw($opt_b $opt_h);","getopts('b:h');","############################## HELP ##############################","sub help{","  print STDERR \"\\n\";","  print STDERR \"Command: $program_name [option] STATS TELOM ANNOT GENOME JS\\n\";","  print STDERR \"Arguments:\\n\";","  print STDERR \" STATS  Result from statdeRSl or maxstat\\n\";","  print STDERR \" TELOM  Telomere BED file\\n\";","  print STDERR \" ANNOT  Annotation BED file\\n\";","  print STDERR \"GENOME  GENOME length file\\n\";","  print STDERR \"    JS  JavaScript file\\n\";","  print STDERR \"\\n\";","  print STDERR \"Options:\\n\";","  print STDERR \"     -b  bed file used to limit VCF table regions\\n\";","  print STDERR \"Author: akira.hasegawa\\@riken.jp\\n\";","  print STDERR \"Update: $program_version\\n\";","  print STDERR \"\\n\";","}","############################## MAIN ##############################","if($ARGV[0]eq\"sortsubs\"){sortSubs();exit();}","elsif(defined($opt_h)||scalar(@ARGV)<4){help();exit();}","my $statsFile=shift(@ARGV);","my $telomereFile=shift(@ARGV);","my $annotationFile=shift(@ARGV);","my $genomeFile=shift(@ARGV);","my $jsFile=shift(@ARGV);","my $filename=basename($statsFile,\".out\");","my $assembly=basename($genomeFile,\".chrom.sizes\");","my ($program,$bedFile,$results)=readStats($statsFile,readBedRegions($opt_b));","intersectTelomere($results,$bedFile,$telomereFile);","findClosest($results,$bedFile,$annotationFile,$genomeFile);","printResult($results,$program,$assembly,$jsFile,$filename);","############################## absolutePath ##############################","sub absolutePath{","\tmy $path=shift();","\tmy $directory=dirname($path);","\tmy $filename=basename($path);","\treturn Cwd::abs_path($directory).\"/$filename\";","}","############################## checkBedRegions ##############################","sub checkBedRegions{","\tmy $regions=shift();","\tif(!defined($regions)){return 0;}#continue","\tmy $chr=shift();","\tif(!exists($regions->{$chr})){return 1;}#skip","\tmy $start=shift();","\tmy $end=shift();","\tforeach my $array(@{$regions->{$chr}}){","\t\tmy ($s,$e)=@{$array};","\t\tif($s<=$start&&$start<$e){return 0;}#intersect","\t\tif(!defined($end)){next;}","\t\tif($s<=$end&&$end<$e){return 0;}#intersect","\t}","\treturn 1;#skip","}","############################## findClosest ##############################","sub findClosest{","\tmy $results=shift();","\tmy $bedA=shift();","\tmy $bedB=shift();","\tmy $genomeFile=shift();","\tmy ($fh,$tmpfile)=tempfile(DIR=>\"/tmp\",TEMPLATE=>\"XXXXXX\",SUFFIX=>\".txt\");","\tclose($fh);","\tsystem(\"bedtools closest -g $genomeFile -D ref -a $bedA -b $bedB>$tmpfile\");","\tmy $reader=openFile($tmpfile);","\twhile(<$reader>){","\t\tchomp;s/\\r//g;","\t\tmy @token=split(/\\t/);","\t\tmy $id=$token[3];","\t\tmy $gene=$token[9];","\t\tmy $distance=$token[12];","\t\tif($id=~/^id(\\d+)$/){","\t\t$id=$1;","\t\tpush(@{$results->[$id]->[13]},[$gene,$distance]);","\t\t}","\t}","\tclose($reader);","}","############################## getDate ##############################","sub getDate{","\tmy $delim=shift();","\tmy $time=shift();","\tif(!defined($delim)){$delim=\"\";}","\tif(!defined($time)||$time eq \"\"){$time=localtime();}","\telse{$time=localtime($time);}","\tmy $year=$time->year+1900;","\tmy $month=$time->mon+1;","\tif($month<10){$month=\"0\".$month;}","\tmy $day=$time->mday;","\tif($day<10){$day=\"0\".$day;}","\treturn $year.$delim.$month.$delim.$day;","}","############################## getMetaDataFromFilename ##############################","sub getMetaDataFromFilename{","\tmy $filename=shift();","\tmy $assembly=shift();","\tmy @metadata=();","\tmy ($name,$target,$other)=split(/_(AD|AR|DD)/,$filename);","\tpush(@metadata,\"HDR mode: $target\");","\tmy @metas=split(/_/,$other);","\tforeach my $meta(@metas){","\t\tif($meta=~/pick(\\d+)i/){push(@metadata,\"pick hits >: $1\");next;}","\t\tif($meta=~/skip(\\d+)i/){push(@metadata,\"skip/mismatch: $1\");next;}","\t\tif($meta=~/min(\\d+)/i){push(@metadata,\"minimum region size: $1\");next;}","\t\tif($meta=~/max(\\d+)/i){push(@metadata,\"maximum region size: $1\");next;}","\t\tif($meta=~/top(\\d+)/i){push(@metadata,\"top region selected: $1\");next;}","\t\tif($meta=~/full/i){push(@metadata,\"output in full mode\");next;}","\t\tif($meta=~/noindel/i){push(@metadata,\"skipping insertion deletion\");next;}","\t}","\treturn ($name,@metadata);","}","############################## intersectTelomere ##############################","sub intersectTelomere{","\tmy $results=shift();","\tmy $bedA=shift();","\tmy $bedB=shift();","\tif(scalar(@{$results})==0){return;}","\tmy ($fh,$tmpfile)=tempfile(DIR=>\"/tmp\",TEMPLATE=>\"XXXXXX\",SUFFIX=>\".txt\");","\tclose($fh);","\tsystem(\"bedtools intersect -a $bedA -b $bedB > $tmpfile\");","\tmy $reader=openFile($tmpfile);","\twhile(<$reader>){","\t\tchomp;s/\\r//g;","\t\tmy @token=split(/\\t/);","\t\tmy $id=$token[3];","\t\tif($id=~/^id(\\d+)$/){","\t\t\t$id=$1;","\t\t\tpush(@{$results->[$id]->[13]},[\"telomere\",0]);","\t\t}","\t}","\tclose($reader);","\tunlink($tmpfile);","}","############################## listFiles ##############################","sub listFiles{","\tmy @input_directories=@_;","\tmy $file_suffix=shift(@input_directories);","\tmy @input_files=();","\tforeach my $input_directory (@input_directories){","\t\t$input_directory=absolutePath($input_directory);","\t\tif(-f $input_directory){push(@input_files,$input_directory);next;}","\t\telsif(-l $input_directory){push(@input_files,$input_directory);next;}","\t\topendir(DIR,$input_directory);","\t\tforeach my $file(readdir(DIR)){","\t\t\tif($file eq \".\"){next;}","\t\t\tif($file eq \"..\") {next;}","\t\t\tif($file eq \"\"){next;}","\t\t\t$file=\"$input_directory/$file\";","\t\t\tif(-d $file){next;}","\t\t\telsif($file!~/$file_suffix$/){next;}","\t\t\tpush(@input_files,$file);","\t\t}","\t\tclosedir(DIR);","\t}","\treturn sort(@input_files);","}","############################## openFile ##############################","sub openFile{","\tmy $path=shift();","\tif($path=~/^(.+\\@.+)\\:(.+)$/){","\t\tif($path=~/\\.gz(ip)?$/){return IO::File->new(\"ssh $1 'gzip -cd $2'|\");}","\t\telsif($path=~/\\.bz(ip)?2$/){return IO::File->new(\"ssh $1 'bzip2 -cd $2'|\");}","\t\telsif($path=~/\\.bam$/){return IO::File->new(\"ssh $1 'samtools view $2'|\");}","\t\telse{return IO::File->new(\"ssh $1 'cat $2'|\");}","\t}else{","\t\tif($path=~/\\.gz(ip)?$/){return IO::File->new(\"gzip -cd $path|\");}","\t\telsif($path=~/\\.bz(ip)?2$/){return IO::File->new(\"bzip2 -cd $path|\");}","\t\telsif($path=~/\\.bam$/){return IO::File->new(\"samtools view $path|\");}","\t\telse{return IO::File->new($path);}","\t}","}","############################## printResult ##############################","sub printResult{","\tmy $results=shift();","\tmy $program=shift();","\tmy $assembly=shift();","\tmy $jsFile=shift();","\tmy $filename=shift();","\tif($assembly=~/^([^\\.]+)\\./){$assembly=$1;}","\tmy ($name,@metadata)=getMetaDataFromFilename($filename);","\tprint \"<html>\\n\";","\tprint \"<head>\\n\";","\tprint \"<title>$name</title>\\n\";","\tprint \"</head>\\n\";","\t#https://neil.fraser.name/software/tablesort/","\tif(defined($jsFile)){","\t\tprint \"<script>\\n\";","\t\tmy $reader=openFile($jsFile);","\t\twhile(<$reader>){print;}","\t\tprint \"</script>\\n\";","\t}","\tprint \"<style>\\n\";","\tprint \"table,td,th{border: 2px #000000 solid;}\\n\";","\tprint \".num{text-align:right;}\\n\";","\tprint \"</style>\\n\";","\tprint \"<body>\\n\";","\tprint \"<h1>$name</h1>\\n\";","\tprint \"<ul>\\n\";","\tprint \"<li>program: $program</li>\\n\";","\tprint \"<li>assembly: $assembly</li>\\n\";","\tforeach my $meta(@metadata){print \"<li>$meta</li>\\n\";}","\tprint \"</ul>\\n\";","\tprint \"<table>\\n\";","\tif($program eq \"statdel\"){","\t\tprint \"<thead>\\n<tr><th class=\\\"num\\\">Group_1</th><th class=\\\"num\\\">Group_2</th><th class=\\\"num\\\">n1</th><th class=\\\"num\\\">n2</th><th class=\\\"num\\\">Teststat</th><th class=\\\"num\\\">n</th><th class=\\\"num\\\">p</th><th class=\\\"case\\\">genome</th><th class=\\\"case\\\">mH</th><th class=\\\"num\\\">rank</th><th class=\\\"num\\\">Line</th><th class=\\\"case\\\">annotation</th></tr>\\n</thead>\\n\";","\t\tprint \"<tbody>\\n\";","\t\t#Group_1\tGroup_2\tn1\tn2\tTeststat\tn\tp\tchr\tstart_bp\tend_bp\tmH\trank\tLine","\t\tforeach my $result(@{$results}){","\t\t\tmy $group_1=$result->[0];","\t\t\tmy $group_2=$result->[1];","\t\t\tmy $n1=$result->[2];","\t\t\tmy $n2=$result->[3];","\t\t\tmy $teststat=$result->[4];","\t\t\tmy $n=$result->[5];","\t\t\tmy $p=$result->[6];","\t\t\tmy $chr=$result->[7];","\t\t\tmy $start_bp=$result->[8];","\t\t\tmy $end_bp=$result->[9];","\t\t\tmy $mH=$result->[10];","\t\t\tmy $rank=$result->[11];","\t\t\tmy $line=$result->[12];","\t\t\tmy $annotation=$result->[13];","\t\t\tmy $genome=\" <a href=\\\"https://genome.ucsc.edu/cgi-bin/hgTracks?db=$assembly&lastVirtModeType=default&lastVirtModeExtraState=&virtModeType=default&virtMode=0&nonVirtPosition=&position=$chr%3A${start_bp}%2D${end_bp}\\\">$chr:$start_bp-$end_bp</a>\";","\t\t\tprint \"<tr><td>$group_1</td><td>$group_2</td><td>$n1</td><td>$n2</td><td>$teststat</td><td>$n</td><td>$p</td><td>$genome</td><td>$mH</td><td>$rank</td><td>$line</td>\";","\t\t\tmy $line=shift();","\t\t\tforeach my $ann(@{$annotation}){","\t\t\t\tmy ($gene,$dist)=@{$ann};","\t\t\t\tif(defined($line)){$line.=\".\";}","\t\t\t\tif($gene ne \"telomere\"){$gene=\" <a href=\\\"https://www.genecards.org/cgi-bin/carddisp.pl?gene=$gene\\\">$gene</a>\"}","\t\t\t\t$line.=\"$gene($dist)\";","\t\t\t}","\t\t\tprint \"<td>$line</td>\";","\t\t\tprint \"</tr>\\n\";","\t\t}","\t}else{","\t\tprint \"<thead>\\n<tr><th class=\\\"num\\\">Var</th><th class=\\\"num\\\">Group_1</th><th class=\\\"num\\\">Group_2</th><th class=\\\"num\\\">n1</th><th class=\\\"num\\\">n2</th><th class=\\\"num\\\">Teststat</th><th class=\\\"num\\\">R</th><th class=\\\"num\\\">p</th><th class=\\\"case\\\">genome</th><th class=\\\"case\\\">median</th><th class=\\\"num\\\">HDR</th><th class=\\\"num\\\">rank</th><th class=\\\"case\\\">annotation</th></tr>\\n</thead>\\n\";","\t\tprint \"<tbody>\\n\";","\t\tforeach my $result(@{$results}){","\t\t\t# Var Group_1 Group_2 n1 n2 Teststat R      p chr   position median HDR   rank","\t\t\t# 130\t0.8737\t0.1527\t3\t3\t19.9671\t30\t0.2500\tchr1\t19499560\tok\t0.7500\t1","\t\t\tmy $var=$result->[0];","\t\t\tmy $group_1=$result->[1];","\t\t\tmy $group_2=$result->[2];","\t\t\tmy $n1=$result->[3];","\t\t\tmy $n2=$result->[4];","\t\t\tmy $teststat=$result->[5];","\t\t\tmy $r=$result->[6];","\t\t\tmy $p=$result->[7];","\t\t\tmy $chr=$result->[8];","\t\t\tmy $position=$result->[9];","\t\t\tmy $median=$result->[10];","\t\t\tmy $hdr=$result->[11];","\t\t\tmy $rank=$result->[12];","\t\t\tmy $annotation=$result->[13];","\t\t\tmy $start_bp=$position-$r;","\t\t\tmy $end_bp=$position+$r;","\t\t\tmy $genome=\" <a href=\\\"https://genome.ucsc.edu/cgi-bin/hgTracks?db=$assembly&lastVirtModeType=default&lastVirtModeExtraState=&virtModeType=default&virtMode=0&nonVirtPosition=&position=$chr%3A${start_bp}%2D${end_bp}\\\">$chr:$start_bp-$end_bp</a>\";","\t\t\tprint \"<tr><td>$var</td><td>$group_1</td><td>$group_2</td><td>$n1</td><td>$n2</td><td>$teststat</td><td>$r</td><td>$p</td><td>$genome</td><td>$median</td><td>$hdr</td><td>$rank</td>\";","\t\t\tmy $line=shift();","\t\t\tforeach my $ann(@{$annotation}){","\t\t\t\tmy ($gene,$dist)=@{$ann};","\t\t\t\tif(defined($line)){$line.=\".\";}","\t\t\t\tif($gene ne \"telomere\"){$gene=\" <a href=\\\"https://www.genecards.org/cgi-bin/carddisp.pl?gene=$gene\\\">$gene</a>\"}","\t\t\t\t$line.=\"$gene($dist)\";","\t\t\t}","\t\t\tprint \"<td>$line</td>\";","\t\t\tprint \"</tr>\\n\";","\t\t}","\t}","\tprint \"</tbody>\\n\";","\tprint \"</table>\\n\";","\tprint \"</body>\\n\";","\tprint \"</html>\\n\";","}","############################## readBedRegions ##############################","sub readBedRegions{","\tmy $bedFile=shift();","\tif(!defined($bedFile)){return;}","\tmy $regions={};","\tmy $reader=openFile($bedFile);","\tmy $hit=0;","\twhile(<$reader>){","\t\tchomp;s/\\r//g;","\t\tmy ($chr,$start,$end,@tokens)=split(/\\t/);","\t\tif(!exists($regions->{$chr})){$regions->{$chr}=[];}","\t\tpush(@{$regions->{$chr}},[$start,$end]);","\t\t$hit++;","\t}","\tif($hit>0){return $regions;}","}","############################## readStats ##############################","sub readStats{","\tmy $file=shift();","\tmy $regions=shift();","\tmy $reader=openFile($file);","\tmy @columns;","\tmy $program;","\twhile(<$reader>){","\t\t# Var Group_1 Group_2    n1    n2 Teststat      R      p chr   position median HDR   rank","\t\t#Group_1\tGroup_2\tn1\tn2\tTeststat\tn\tp\tchr\tstart_bp\tend_bp\tmH\trank\tLine","\t\tif(/^\\s+(.+)$/){$_=$1;}","\t\tif(/Var Group_1/){chomp;s/\\r//g;@columns=split(/\\s+/);$program=\"maxstatRS\";last;}","\t\tif(/Group_1/){chomp;s/\\r//g;@columns=split(/\\t/);$program=\"statdel\";last;}","\t}","\tmy ($fh,$tmpfile)=tempfile(DIR=>\"/tmp\",TEMPLATE=>\"XXXXXX\",SUFFIX=>\".bed\");","\tmy $index=0;","\tmy @results=();","\tif($program eq \"statdel\"){","\t\twhile(<$reader>){","\t\t\tif(/^\\s+$/){last;}","\t\t\tif(/Note:/){last;}","\t\t\tchomp;s/\\r//g;","\t\t\tmy @tokens=split(/\\t/);","\t\t\tpush(@results,\\@tokens);","\t\t\tmy $chr=$tokens[7];","\t\t\tmy $start=$tokens[8];","\t\t\tmy $end=$tokens[9];","\t\t\tif(checkBedRegions($regions,$chr,$start,$end)){next;}","\t\t\tmy $name=\"id$index\";","\t\t\tprint $fh \"$chr\\t$start\\t$end\\t$name\\t0\\t.\\n\";","\t\t\t$index++;","\t\t}","\t}elsif($program eq \"maxstatRS\"){","\t\t# 130\t0.8737\t0.1527\t3\t3\t19.9671\t30\t0.2500\tchr1\t19499560\tok\t0.7500\t1","\t\twhile(<$reader>){","\t\t\tif(/^\\s+$/){last;}","\t\t\tif(/Note:/){last;}","\t\t\tchomp;s/\\r//g;","\t\t\tmy @tokens=split(/\\t/);","\t\t\tpush(@results,\\@tokens);","\t\t\tmy $margin=$tokens[6];","\t\t\tif($margin==-9){$margin=0;}","\t\t\tmy $chr=$tokens[8];#chr1","\t\t\tmy $start=$tokens[9]-$margin;#19499560-30","\t\t\tif($start<0){$start=0;}","\t\t\tmy $end=$tokens[9]+$margin;#19499560+30","\t\t\tif(checkBedRegions($regions,$chr,$start,$end)){next;}","\t\t\tmy $name=\"id$index\";","\t\t\tprint $fh \"$chr\\t$start\\t$end\\t$name\\t0\\t.\\n\";","\t\t\t$index++;","\t\t}","\t}","\tclose($fh);","\tmy ($fh2,$tmpfile2)=tempfile(DIR=>\"/tmp\",TEMPLATE=>\"XXXXXX\",SUFFIX=>\".bed\");","\tclose($fh2);","\tsystem(\"sort -k1,1 -k2,2n -k3,3n $tmpfile > $tmpfile2\");","\treturn ($program,$tmpfile2,\\@results);","}","############################## sortSubs ##############################","sub sortSubs{","\tmy $path=\"$program_directory/$program_name\";","\tmy $reader=openFile($path);","\tmy @headers=();","\tmy $name;","\tmy $blocks={};","\tmy $block=[];","\tmy $date=getDate(\"/\");","\tmy @orders=();","\twhile(<$reader>){","\t\tchomp;s/\\r//g;","\t\tif(/^#{30}\\s*(\\S+)\\s*#{30}$/){","\t\t\t$name=$1;","\t\t\tif($name!~/^[A-Z]+$/){push(@{$block},$_);last;}","\t\t}elsif(/^my \\$program_version=\\\"\\S+\\\";/){$_=\"my \\$program_version=\\\"$date\\\";\";}","\t\tpush(@headers,$_);","\t}","\twhile(<$reader>){","\t\tchomp;s/\\r//g;","\t\tif(/^#{30}\\s*(\\S+)\\s*#{30}$/){","\t\t\t$blocks->{$name}=$block;","\t\t\tpush(@orders,$name);","\t\t\t$name=$1;","\t\t\t$block=[];","\t\t}","\t\tpush(@{$block},$_);","\t}","\tclose($reader);","\tif(defined($name)){$blocks->{$name}=$block;push(@orders,$name);}","\tmy ($writer,$file)=tempfile(DIR=>\"/tmp\",SUFFIX=>\".pl\");","\tforeach my $line(@headers){print $writer \"$line\\n\";}","\tforeach my $key(sort{$a cmp $b}@orders){foreach my $line(@{$blocks->{$key}}){print $writer \"$line\\n\";}}","\tclose($writer);","\treturn system(\"mv $file $path\");","}"],"https://moirai2.github.io/schema/daemon/script/name":"annotation.pl"},"https://moirai2.github.io/schema/daemon/sleeptime":"10","https://moirai2.github.io/schema/daemon/userdefined":{"html":"$project/html/$filename.html"}}
