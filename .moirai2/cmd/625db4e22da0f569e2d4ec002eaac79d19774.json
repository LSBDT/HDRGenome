{"https://moirai2.github.io/schema/daemon/bash":["logFile=$project/log/genomecov.$case.txt","genomecov.pl $noIndel -o $tmpdir -m $stretchMode -t $topX -r $regionSize $table $chrominfo $case > $output 2> $logFile","output=`ls $tmpdir/*.txt`","filename=`basename $output`","echo \"INSERT $case->$project/region#log->$logFile\""],"https://moirai2.github.io/schema/daemon/command/option":{"noIndel":"-d"},"https://moirai2.github.io/schema/daemon/input":["case","chrominfo","genome","noIndel","project","regionSize","stretchMode","table","topX"],"https://moirai2.github.io/schema/daemon/approximate/time":"1","https://moirai2.github.io/schema/daemon/output":"output","https://moirai2.github.io/schema/daemon/query/in":["root->$project/vcftable->$table","root->$project/case->$case","$project->genomecov#noIndel->$noIndel","$project->genomecov#stretchMode->$stretchMode","$project->genomecov#topX->$topX","$project->genomecov#regionSize->$regionSize","$project->annotation#genome->$genome","$genome->chrominfo->$chrominfo"],"https://moirai2.github.io/schema/daemon/query/out":"$case->$project/region->$output","https://moirai2.github.io/schema/daemon/dagdb":"db","https://moirai2.github.io/schema/daemon/script":{"https://moirai2.github.io/schema/daemon/script/code":["#!/usr/bin/perl","use strict 'vars';","use Cwd;","use File::Basename;","use File::Temp qw/tempfile tempdir/;","use FileHandle;","use Getopt::Std;","use IO::File;","use Time::localtime;","############################## HEADER ##############################","my ($program_name,$program_directory,$program_suffix)=fileparse($0);","$program_directory=Cwd::abs_path($program_directory);","my $program_path=\"$program_directory/$program_name\";","my $program_version=\"2024/04/22\";","############################## OPTIONS ##############################","use vars qw($opt_d $opt_e $opt_f $opt_F $opt_g $opt_h $opt_o $opt_r $opt_t);","getopts('d:ef:F:ho:r:t:');","############################## HELP ##############################","sub help{","  print STDERR \"\\n\";","  print STDERR \"Command: $program_name [option] TABLE GENOME CASE\\n\";","  print STDERR \"Arguments:\\n\";","  print STDERR \" TABLE  Table from vcftable.pl\\n\";","  print STDERR \"GENOME  Genome lengths\\n\";","  print STDERR \"  CASE  Case file/directory\\n\";","  print STDERR \"Options:\\n\";","  print STDERR \"    -c  Use (c)ytoband file for removing telomere candidates\\n\";","  print STDERR \"    -d  threshold (d)epth (default=10)\\n\";","  print STDERR \"    -e  (e)xclude insertion/deletion\\n\";","  print STDERR \"    -f  filter hom/het/N (default=hom)\\n\";","  print STDERR \"    -F  unfilter hom/het/N (default=none)\\n\";","  print STDERR \"    -g  genomecov mode (default='bga')\\n\";","  print STDERR \"    -o  (o)utdir (default=STDOUT)\\n\";","  print STDERR \"    -r  (r)egion size (default=10,000bp)\\n\";","  print STDERR \"    -t  pick (t)op X (default=10)\\n\";","  print STDERR \"\\n\";","  print STDERR \"Flag:\\n\";","  print STDERR \"     0  wild\\n\";","  print STDERR \"     1  (het)erozygous\\n\";","  print STDERR \"     2  (hom)ozygous\\n\";","  print STDERR \"     4  deletion\\n\";","  print STDERR \"     8  insertion\\n\";","  print STDERR \"    16  multi allelic (column5.count(',')>0)\\n\";","  print STDERR \"    32  low quality (column6<QV50)\\n\";","  print STDERR \"    64  segmental deletion candidate (ALT/REF<1/threshold=0.5)\\n\";","  print STDERR \"   128  segmental duplication candidate (ALT/REF>=threshold=1.5)\\n\";","  print STDERR \"   256  low coverage candidate (DEPTH/AVG<=1/threshold=0.5)\\n\";","  print STDERR \"   512  high coverage candidate (DEPTH/AVG>=threshold=2.0)\\n\";","  print STDERR \"\\n\";","  print STDERR \"NOTE: hom - look for homozygous stretch\\n\";","  print STDERR \"      het - look for heterozygous stretch\\n\";","\t\tprint STDERR \"      N   - look for flag with integer N (look for Flag for more detail)\\n\";","\t\tprint STDERR \"            Flag can be summed, for example, hom(2)+insertion(8)=10\\n\";","  print STDERR \"      https://bedtools.readthedocs.io/en/latest/content/tools/genomecov.html\\n\";","  print STDERR \"      https://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/hg38.chrom.sizes\\n\";","  print STDERR \"\\n\";","  print STDERR \"Author: akira.hasegawa\\@riken.jp\\n\";","  print STDERR \"Update: $program_version\\n\";","  print STDERR \"\\n\";","}","############################## MAIN ##############################","if($ARGV[0]eq\"sortsubs\"){sortSubs();exit();}","elsif(defined($opt_h)||scalar(@ARGV)<2){help();exit();}","my @caseFiles=@ARGV;","my $tableFile=shift(@caseFiles);","my $genomeFile=shift(@caseFiles);","if(scalar(@caseFiles)==0){@caseFiles=getSampleNames($tableFile);}","my $noIndel=$opt_e;","my $thresholdDepth=$opt_d;","my $filterMode=modeParser($opt_f,\"hom\");","my $unfilterMode=modeParser($opt_F);","my $regionSize=defined($opt_r)?$opt_r:10000;","my $genomecovMode=defined($opt_g)?$opt_g:\"bga\";","my $topX=defined($opt_t)?$opt_t:10;","my $outdir=(scalar(@caseFiles)>1)?\"out\":$opt_o;","foreach my $caseFile(@caseFiles){","\tmy $basename=getBasename($caseFile);","\tmy $bedfile=createBed($tableFile,$basename,$genomeFile,$noIndel,$filterMode,$unfilterMode,$regionSize,$genomecovMode);","\tmy $groups=groupByDepth($bedfile);","\tmy $writer=fileWriter($outdir,$basename,$noIndel,$filterMode,$unfilterMode,$regionSize,$topX,$thresholdDepth);","\tif(defined($thresholdDepth)){pickByDepth($writer,$thresholdDepth,$groups);}","\telsif(defined($topX)){pickTopX($writer,$topX,$groups);}","}","############################## absolutePath ##############################","sub absolutePath{","\tmy $path=shift();","\tmy $directory=dirname($path);","\tmy $filename=basename($path);","\treturn Cwd::abs_path($directory).\"/$filename\";","}","############################## createBed ##############################","sub createBed{","  my $tableFile=shift();","  my $basename=shift();","  my $genomeFile=shift();","  my $noIndel=shift();","  my $filterMode=shift();","  my $unfilterMode=shift();","  my $regionSize=shift();","  my $genomecovMode=shift();","  my $index=getColumnIndex($tableFile,$basename);","  my $reader=openFile($tableFile);","\t\tmy $lengths=readGenomeFile($genomeFile);","  my $half=int($regionSize/2);","  my ($fh,$tmpfile)=tempfile(DIR=>\"/tmp\",TEMPLATE=>\"XXXXXX\",SUFFIX=>\".bed\");","\t\tmy $count=0;","  while(<$reader>){","    chomp;s/\\r//g;","    my @tokens=split(/\\t/);","    my $chr=$tokens[0];","    my $pos=$tokens[1];","    my $ref=$tokens[2];","    my $alt=$tokens[3];","    my $flag=$tokens[$index];","\t\t\t\tif(defined($filterMode)&&($flag&$filterMode)==0){next;}","\t\t\t\tif(defined($unfilterMode)&&($flag&$unfilterMode)>0){next;}","\t\t\t\tif($noIndel&&(($flag&4)>0||($flag&8)>0)){next;}","\t\t\t\tmy $start=$pos-$half;","\t\t\t\tmy $end=$pos+$half;","\t\t\t\tif($start<0){$start=0;}","\t\t\t\tif($end<0){$end=0;}","\t\t\t\tif(!exists($lengths->{$chr})){","\t\t\t\t\tif(exists($lengths->{\"chr$chr\"})){$chr=\"chr$chr\";}","\t\t\t\t\telse{print STDERR \"Unknown chromosome: $chr\\n\";next;}","\t\t\t\t}","\t\t\t\tif($start>$lengths->{$chr}){$start=$lengths->{$chr};}","\t\t\t\tif($end>$lengths->{$chr}){$end=$lengths->{$chr};}","\t\t\t\tprint $fh \"$chr\\t$start\\t$end\\t$chr:$pos\\t$flag\\t.\\n\";","\t\t\t\t$count++;","  }","  close($reader);","  close($fh);","\t\tif($count==0){","\t\t\tunlink($tmpfile);","\t\t\tprint STDERR \"No stretch of regions found found\\n\";","\t\t\texit(1);","\t\t}","  my ($fh2,$tmpfile2)=tempfile(DIR=>\"/tmp\",TEMPLATE=>\"XXXXXX\",SUFFIX=>\".bed\");","  close($fh2);","  system(\"sort -k1,1 -k2,2n -k3,3n $tmpfile > $tmpfile2\");","  #https://bedtools.readthedocs.io/en/latest/content/tools/genomecov.html","  my ($fh3,$tmpfile3)=tempfile(DIR=>\"/tmp\",TEMPLATE=>\"XXXXXX\",SUFFIX=>\".bed\");","  close($fh3);","  system(\"bedtools genomecov -i $tmpfile2 -g $genomeFile -$genomecovMode > $tmpfile3\");","  unlink($tmpfile2);","  return $tmpfile3;","}","############################## fileWriter ##############################","sub fileWriter{","  my $outdir=shift();","  my $basename=shift();","  my $noIndel=shift();","  my $filterMode=shift();","  my $unfilterMode=shift();","  my $regionSize=shift();","  my $topX=shift();","  my $thresholdDepth=shift();","  if(!defined($outdir)){return IO::File->new(\">&STDOUT\");}","  mkdir($outdir);","  my $filename=\"$outdir/$basename.\";","\t\tif(defined($filterMode)){$filename.=\"filter\".$filterMode;}","\t\tif(defined($unfilterMode)){$filename.=\"_unfilter\".$unfilterMode;}","\t\tif(defined($regionSize)){$filename.=\"_region\".$regionSize;}","  if(defined($thresholdDepth)){$filename.=\"_depth\".$thresholdDepth;}","  elsif(defined($topX)){$filename.=\"_top${topX}\";}","  if(defined($noIndel)){$filename.=\"_noindel\";}","  $filename.=\".txt\";","  return IO::File->new(\">$filename\");","}","############################## getBasename ##############################","sub getBasename{","  my $file=shift();","  my $basename=basename($file);","  if($basename=~/^(.+)\\.g\\.vcf$/i){$basename=$1}","  elsif($basename=~/^(.+)\\.vcf$/i){$basename=$1}","  elsif($basename=~/^(.+)\\.bcf$/i){$basename=$1}","  elsif($basename=~/^(.+)\\.avinput$/i){$basename=$1}","  return $basename;","}","############################## getColumnIndex ##############################","sub getColumnIndex{","  my $tableFile=shift();","  my $basename=shift();","\t\tmy $reader=openFile($tableFile);","  my $line=<$reader>;","\t\twhile($line=~/^##/){$line=<$reader>;}","\t\tif($line!~/^#/){return 2;}","  chomp($line);","  $line=~s/\\r//g;","\t\tclose($reader);","  my @tokens=split(/\\t/,$line);","  my $index=-1;","  for(my $i=4;$i<scalar(@tokens);$i++){","    if($tokens[$i]eq$basename){$index=$i;}","  }","\t\tif($index<0){","\t\t\tprint STDERR\t\"Column not found: $basename\\n\";","\t\t\texit(1);","\t\t}","  return $index;","}","############################## getDate ##############################","sub getDate{","\tmy $delim=shift();","\tmy $time=shift();","\tif(!defined($delim)){$delim=\"\";}","\tif(!defined($time)||$time eq \"\"){$time=localtime();}","\telse{$time=localtime($time);}","\tmy $year=$time->year+1900;","\tmy $month=$time->mon+1;","\tif($month<10){$month=\"0\".$month;}","\tmy $day=$time->mday;","\tif($day<10){$day=\"0\".$day;}","\treturn $year.$delim.$month.$delim.$day;","}","############################## getSampleNames ##############################","sub getSampleNames{","\tmy $tableFile=shift();","\tmy $reader=openFile($tableFile);","\tmy $line=<$reader>;","\twhile($line=~/^##/){$line=<$reader>;}","\tif($line!~/^#/){return basename($tableFile);}","\tclose($reader);","\tchomp($line);","\t$line=~s/\\r//g;","\tmy @tokens=split(/\\t/,$line);","\tmy @samples=();","\tfor(my $i=2;$i<scalar(@tokens);$i++){push(@samples,$tokens[$i]);}","\treturn @samples;","}","############################## groupByDepth ##############################","sub groupByDepth{","  my $file=shift();","  my $reader=openFile($file);","  my @depths=();","  my $currentChr;","  my $currentStart;","  my $currentEnd;","  my $currentDepth;","  my @array=();","  while(<$reader>){","    chomp;s/\\r//g;","    my ($chr,$start,$end,$depth)=split(/\\t/);","    if($depth==0){","      if(defined($currentChr)&&$currentDepth>1){push(@array,[$currentChr,$currentStart,$currentEnd,$currentDepth]);}","      $currentChr=undef;","      $currentStart=undef;","      $currentEnd=undef;","      $currentDepth=undef;","      next;","    }","    if(!defined($currentChr)){","      $currentChr=$chr;","      $currentStart=$start;","      $currentEnd=$end;","      $currentDepth=$depth;","      next;","    }","    $currentEnd=$end;","    if($currentDepth<$depth){$currentDepth=$depth;}","  }","  if(defined($currentChr)&&$currentDepth>1){push(@array,[$currentChr,$currentStart,$currentEnd,$currentDepth]);}","  close($reader);","  return \\@array;","}","############################## listFiles ##############################","sub listFiles{","\tmy @input_directories=@_;","\tmy $file_suffix=shift(@input_directories);","\tmy @input_files=();","\tforeach my $input_directory (@input_directories){","\t\t$input_directory=absolutePath($input_directory);","\t\tif(-f $input_directory){push(@input_files,$input_directory);next;}","\t\telsif(-l $input_directory){push(@input_files,$input_directory);next;}","\t\topendir(DIR,$input_directory);","\t\tforeach my $file(readdir(DIR)){","\t\t\tif($file eq \".\"){next;}","\t\t\tif($file eq \"..\") {next;}","\t\t\tif($file eq \"\"){next;}","\t\t\t$file=\"$input_directory/$file\";","\t\t\tif(-d $file){next;}","\t\t\telsif($file!~/$file_suffix$/){next;}","\t\t\tpush(@input_files,$file);","\t\t}","\t\tclosedir(DIR);","\t}","\treturn sort(@input_files);","}","############################## modeParser ##############################","sub modeParser{","\tmy $mode=shift();","\tmy $default=shift();","\tif(!defined($mode)){","\t\tif(defined($default)){$mode=$default;}","\t\telse{return;}","\t}","\tif($mode eq\"hom\"){$mode=2;}","\telsif($mode eq\"het\"){$mode=1;}","\telsif($mode eq\"dup\"){$mode=512;}","\telsif($mode=~/^(\\d+)$/){$mode=$1+0;}#convert string to integer","\telsif($mode=~/n/i){print STDERR\t\"Please use integer\\n\";}","\telse{print STDERR \"Unknown stretch mode: $mode\\n\";exit(1);}","\treturn $mode","}","############################## openFile ##############################","sub openFile{","\tmy $path=shift();","\tif($path=~/^(.+\\@.+)\\:(.+)$/){","\t\tif($path=~/\\.gz(ip)?$/){return IO::File->new(\"ssh $1 'gzip -cd $2'|\");}","\t\telsif($path=~/\\.bz(ip)?2$/){return IO::File->new(\"ssh $1 'bzip2 -cd $2'|\");}","\t\telsif($path=~/\\.bam$/){return IO::File->new(\"ssh $1 'samtools view $2'|\");}","\t\telse{return IO::File->new(\"ssh $1 'cat $2'|\");}","\t}else{","\t\tif($path=~/\\.gz(ip)?$/){return IO::File->new(\"gzip -cd $path|\");}","\t\telsif($path=~/\\.bz(ip)?2$/){return IO::File->new(\"bzip2 -cd $path|\");}","\t\telsif($path=~/\\.bam$/){return IO::File->new(\"samtools view $path|\");}","\t\telse{return IO::File->new($path);}","\t}","}","############################## pickByDepth ##############################","sub pickByDepth{","  my $writer=shift();","  my $thresholdDepth=shift();","  my $groups=shift();","  my $hash={};","  for(my $i=0;$i<scalar(@{$groups});$i++){","    my ($chr,$start,$end,$depth)=@{$groups->[$i]};","    push(@{$hash->{$depth}},$i);","  }","  my ($fh,$tmpfile)=tempfile(DIR=>\"/tmp\",TEMPLATE=>\"XXXXXX\",SUFFIX=>\".bed\");","  my @keys=sort{$b<=>$a}keys(%{$hash});","  foreach my $key(@keys){","    my @indeces=@{$hash->{$key}};","    foreach my $index(@indeces){","      my $group=$groups->[$index];","      my $depth=$group->[3];","      if($depth<$thresholdDepth){next;}","      print $fh join(\"\\t\",@{$group}).\"\\n\";","    }","  }","  close($fh);","  my ($fh2,$tmpfile2)=tempfile(DIR=>\"/tmp\",TEMPLATE=>\"XXXXXX\",SUFFIX=>\".bed\");","  close($fh2);","  system(\"sort -k1,1 -k2,2n -k3,3n $tmpfile > $tmpfile2\");","  my $reader=openFile($tmpfile2);","  print $writer \"#Chr\\tStart\\tEnd\\tDepth\\n\";","  while(<$reader>){chomp;s/\\r//g;print $writer \"$_\\n\";}","  close($reader);","  close($writer);","}","############################## pickTopX ##############################","sub pickTopX{","  my $writer=shift();","  my $topX=shift();","  my $groups=shift();","  my $hash={};","  for(my $i=0;$i<scalar(@{$groups});$i++){","    my ($chr,$start,$end,$depth)=@{$groups->[$i]};","    push(@{$hash->{$depth}},$i);","  }","  my ($fh,$tmpfile)=tempfile(DIR=>\"/tmp\",TEMPLATE=>\"XXXXXX\",SUFFIX=>\".bed\");","  my @keys=sort{$b<=>$a}keys(%{$hash});","  my $total=0;","  foreach my $key(@keys){","    my @indeces=@{$hash->{$key}};","    foreach my $index(@indeces){","      my $group=$groups->[$index];","      print $fh join(\"\\t\",@{$group}).\"\\n\";","    }","    $total+=scalar(@indeces);","    if($total>=$topX){last;}","  }","  close($fh);","  my ($fh2,$tmpfile2)=tempfile(DIR=>\"/tmp\",TEMPLATE=>\"XXXXXX\",SUFFIX=>\".bed\");","  close($fh2);","  system(\"sort -k4,4nr -k1,1 -k2,2n -k3,3n $tmpfile > $tmpfile2\");","  my $reader=openFile($tmpfile2);","  print $writer \"#Chr\\tStart\\tEnd\\tDepth\\n\";","  while(<$reader>){chomp;s/\\r//g;print $writer \"$_\\n\";}","  close($reader);","  close($writer);","}","############################## printTable ##############################","sub printTable{","\tmy @out=@_;","\tmy $return_type=$out[0];","\tif(lc($return_type) eq \"print\"){$return_type=0;shift(@out);}","\telsif(lc($return_type) eq \"array\"){$return_type=1;shift(@out);}","\telsif(lc($return_type) eq \"stderr\"){$return_type=2;shift(@out);}","\telse{$return_type= 2;}","\tprintTableSub($return_type,\"\",@out);","}","sub printTableSub{","\tmy @out=@_;","\tmy $return_type=shift(@out);","\tmy $string=shift(@out);","\tmy @output=();","\tfor(@out){","\t\tif(ref( $_ ) eq \"ARRAY\"){","\t\t\tmy @array=@{$_};","\t\t\tmy $size=scalar(@array);","\t\t\tif($size==0){","\t\t\t\tif($return_type==0){print $string.\"[]\\n\";}","\t\t\t\telsif($return_type==1){push(@output,$string.\"[]\");}","\t\t\t\telsif($return_type==2){print STDERR $string.\"[]\\n\";}","\t\t\t}else{","\t\t\t\tfor(my $i=0;$i<$size;$i++){push(@output,printTableSub($return_type,$string.\"[$i]=>\\t\",$array[$i]));}","\t\t\t}","\t\t} elsif(ref($_)eq\"HASH\"){","\t\t\tmy %hash=%{$_};","\t\t\tmy @keys=sort{$a cmp $b}keys(%hash);","\t\t\tmy $size=scalar(@keys);","\t\t\tif($size==0){","\t\t\t\tif($return_type==0){print $string.\"{}\\n\";}","\t\t\t\telsif($return_type==1){push( @output,$string.\"{}\");}","\t\t\t\telsif($return_type==2){print STDERR $string.\"{}\\n\";}","\t\t\t}else{","\t\t\t\tforeach my $key(@keys){push(@output,printTableSub($return_type,$string.\"{$key}=>\\t\",$hash{$key}));}","\t\t\t}","\t\t}elsif($return_type==0){print \"$string\\\"$_\\\"\\n\";}","\t\telsif($return_type==1){push( @output,\"$string\\\"$_\\\"\");}","\t\telsif($return_type==2){print STDERR \"$string\\\"$_\\\"\\n\";}","\t}","\treturn wantarray?@output:$output[0];","}","############################## readGenomeFile ##############################","sub readGenomeFile{","\tmy $genomeFile=shift();","\tmy $reader=openFile($genomeFile);","\tmy $hash={};","\twhile(<$reader>){","\t\tchomp;s/\\r//g;","\t\tmy ($chr,$length)=split(/\\t/);","\t\t$hash->{$chr}=$length;","\t}","\tclose($reader);","\treturn $hash;","}","############################## sortSubs ##############################","sub sortSubs{","\tmy $path=\"$program_directory/$program_name\";","\tmy $reader=openFile($path);","\tmy @headers=();","\tmy $name;","\tmy $blocks={};","\tmy $block=[];","\tmy $date=getDate(\"/\");","\tmy @orders=();","\twhile(<$reader>){","\t\tchomp;s/\\r//g;","\t\tif(/^#{30}\\s*(\\S+)\\s*#{30}$/){","\t\t\t$name=$1;","\t\t\tif($name!~/^[A-Z]+$/){push(@{$block},$_);last;}","\t\t}elsif(/^my \\$program_version=\\\"\\S+\\\";/){$_=\"my \\$program_version=\\\"$date\\\";\";}","\t\tpush(@headers,$_);","\t}","\twhile(<$reader>){","\t\tchomp;s/\\r//g;","\t\tif(/^#{30}\\s*(\\S+)\\s*#{30}$/){","\t\t\t$blocks->{$name}=$block;","\t\t\tpush(@orders,$name);","\t\t\t$name=$1;","\t\t\t$block=[];","\t\t}","\t\tpush(@{$block},$_);","\t}","\tclose($reader);","\tif(defined($name)){$blocks->{$name}=$block;push(@orders,$name);}","\tmy ($writer,$file)=tempfile(DIR=>\"/tmp\",SUFFIX=>\".pl\");","\tforeach my $line(@headers){print $writer \"$line\\n\";}","\tforeach my $key(sort{$a cmp $b}@orders){foreach my $line(@{$blocks->{$key}}){print $writer \"$line\\n\";}}","\tclose($writer);","\treturn system(\"mv $file $path\");","}"],"https://moirai2.github.io/schema/daemon/script/name":"genomecov.pl"},"https://moirai2.github.io/schema/daemon/sleeptime":"60","https://moirai2.github.io/schema/daemon/userdefined":{"output":"$project/genomecov/$filename"}}
