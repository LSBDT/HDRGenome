{"https://moirai2.github.io/schema/daemon/bash":["output=$project/vcftable.select.txt","selectVcftable.pl $vcftable $selectBed > $output","echo \"UPDATE root->$project/vcftable->$output\""],"https://moirai2.github.io/schema/daemon/input":["project","selectBed","vcftable"],"https://moirai2.github.io/schema/daemon/approximate/time":"1","https://moirai2.github.io/schema/daemon/query/in":["root->$project/vcftable->$vcftable","$project->vcftable#selectBed->$selectBed"],"https://moirai2.github.io/schema/daemon/query/out":"vcfselect->$project/flag->completed","https://moirai2.github.io/schema/daemon/dagdb":"db","https://moirai2.github.io/schema/daemon/script":{"https://moirai2.github.io/schema/daemon/script/code":["#!/usr/bin/perl","my $vcfFile=shift(@ARGV);","my $bedFile=shift(@ARGV);","my $regions=readBedFile($bedFile);","selectRegions($vcfFile,$regions);","############################## selectRegions ##############################","sub selectRegions{","    my $vcfFile=shift();","    my $regions=shift();","    my $reader=openFile($vcfFile);","    my $preChr;","    my $region;","    my $label=<$reader>;","    print $label;","    while(<$reader>){","        chomp;","        my ($chr,$position,@counts)=split(/\\t/);","        if($preChr ne $chr){$region=exists($regions->{$chr})?$regions->{$chr}:undef;$preChr=$chr;}","        if(!defined($region)){next;}","        my ($start,$end)=@{$region->[0]};","        while($end<$position){","            shift(@{$region});","            if(scalar(@{$region})<1){$region=undef;delete($regions->{$chr});last;}","            ($start,$end)=@{$region->[0]};","        }","        if(!defined($region)){next;}","        if($position<$start){next;}","        print \"$chr\\t$position\\t\".join(\"\\t\",@counts).\"\\n\";","    }","    close($reader);","}","############################## readBedFile ##############################","sub readBedFile{","    my $file=shift();","    my $reader=openFile($file);","    my $regions={};","    while(<$reader>){","        chomp;","        my ($chr,$start,$end,@tokens)=split(/\\t/);","        if(!defined($regions->{$chr})){$regions->{$chr}=[];}","        push(@{$regions->{$chr}},[$start,$end]);","    }","    close($reader);","    return $regions;","}","############################## openFile ##############################","sub openFile{","\tmy $path=shift();","\tif($path=~/^(.+\\@.+)\\:(.+)$/){","\t\tif($path=~/\\.gz(ip)?$/){return IO::File->new(\"ssh $1 'gzip -cd $2'|\");}","\t\telsif($path=~/\\.bz(ip)?2$/){return IO::File->new(\"ssh $1 'bzip2 -cd $2'|\");}","\t\telsif($path=~/\\.bam$/){return IO::File->new(\"ssh $1 'samtools view $2'|\");}","\t\telse{return IO::File->new(\"ssh $1 'cat $2'|\");}","\t}else{","\t\tif($path=~/\\.gz(ip)?$/){return IO::File->new(\"gzip -cd $path|\");}","\t\telsif($path=~/\\.bz(ip)?2$/){return IO::File->new(\"bzip2 -cd $path|\");}","\t\telsif($path=~/\\.bam$/){return IO::File->new(\"samtools view $path|\");}","\t\telse{return IO::File->new($path);}","\t}","}","############################## printTable ##############################","sub printTable{","\tmy @out=@_;","\tmy $return_type=$out[0];","\tif(lc($return_type) eq \"print\"){$return_type=0;shift(@out);}","\telsif(lc($return_type) eq \"array\"){$return_type=1;shift(@out);}","\telsif(lc($return_type) eq \"stderr\"){$return_type=2;shift(@out);}","\telse{$return_type= 2;}","\tprintTableSub($return_type,\"\",@out);","}","sub printTableSub{","\tmy @out=@_;","\tmy $return_type=shift(@out);","\tmy $string=shift(@out);","\tmy @output=();","\tfor(@out){","\t\tif(ref( $_ ) eq \"ARRAY\"){","\t\t\tmy @array=@{$_};","\t\t\tmy $size=scalar(@array);","\t\t\tif($size==0){","\t\t\t\tif($return_type==0){print $string.\"[]\\n\";}","\t\t\t\telsif($return_type==1){push(@output,$string.\"[]\");}","\t\t\t\telsif($return_type==2){print STDERR $string.\"[]\\n\";}","\t\t\t}else{","\t\t\t\tfor(my $i=0;$i<$size;$i++){push(@output,printTableSub($return_type,$string.\"[$i]=>\\t\",$array[$i]));}","\t\t\t}","\t\t} elsif(ref($_)eq\"HASH\"){","\t\t\tmy %hash=%{$_};","\t\t\tmy @keys=sort{$a cmp $b}keys(%hash);","\t\t\tmy $size=scalar(@keys);","\t\t\tif($size==0){","\t\t\t\tif($return_type==0){print $string.\"{}\\n\";}","\t\t\t\telsif($return_type==1){push( @output,$string.\"{}\");}","\t\t\t\telsif($return_type==2){print STDERR $string.\"{}\\n\";}","\t\t\t}else{","\t\t\t\tforeach my $key(@keys){push(@output,printTableSub($return_type,$string.\"{$key}=>\\t\",$hash{$key}));}","\t\t\t}","\t\t}elsif($return_type==0){print \"$string\\\"$_\\\"\\n\";}","\t\telsif($return_type==1){push( @output,\"$string\\\"$_\\\"\");}","\t\telsif($return_type==2){print STDERR \"$string\\\"$_\\\"\\n\";}","\t}","\treturn wantarray?@output:$output[0];","}"],"https://moirai2.github.io/schema/daemon/script/name":"selectVcftable.pl"},"https://moirai2.github.io/schema/daemon/sleeptime":"60"}
