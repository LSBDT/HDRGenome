{"https://moirai2.github.io/schema/daemon/bash":["logFile=$project/log/findrun.$case.txt","findrun.pl $noIndel -m $stretchMode -p $pickupNumber -r $regionSize -s $skipCount -o $tmpdir $table $case 2> $logFile","output=`ls $tmpdir/*.txt`","filename=`basename $output`","echo \"INSERT $case->$project/region#log->$logFile\""],"https://moirai2.github.io/schema/daemon/command/option":{"noIndel":"-d"},"https://moirai2.github.io/schema/daemon/input":["case","noIndel","pickupNumber","project","regionSize","skipCount","stretchMode","table"],"https://moirai2.github.io/schema/daemon/approximate/time":"1","https://moirai2.github.io/schema/daemon/output":"output","https://moirai2.github.io/schema/daemon/query/in":["root->$project/vcftable->$table","root->$project/case->$case","$project->findrun#noIndel->$noIndel","$project->findrun#stretchMode->$stretchMode","$project->findrun#pickupNumber->$pickupNumber","$project->findrun#regionSize->$regionSize","$project->findrun#skipCount->$skipCount"],"https://moirai2.github.io/schema/daemon/query/out":"$case->$project/region->$output","https://moirai2.github.io/schema/daemon/dagdb":"db","https://moirai2.github.io/schema/daemon/script":{"https://moirai2.github.io/schema/daemon/script/code":["#!/usr/bin/perl","use strict 'vars';","use Cwd;","use File::Basename;","use File::Temp qw/tempfile tempdir/;","use FileHandle;","use Getopt::Std;","use IO::File;","use Time::localtime;","############################## HEADER ##############################","my ($program_name,$program_directory,$program_suffix)=fileparse($0);","$program_directory=Cwd::abs_path($program_directory);","my $program_path=\"$program_directory/$program_name\";","my $program_version=\"2024/06/13\";","############################## OPTIONS ##############################","use vars qw($opt_b $opt_d $opt_f $opt_h $opt_m $opt_o $opt_p $opt_r $opt_R $opt_s);","getopts('bdfhm:o:p:r:R:s:');","############################## HELP ##############################","sub help{","\tprint STDERR \"\\n\";","\tprint STDERR \"Command: $program_name [option] TABLE CASE\\n\";","\tprint STDERR \"Arguments:\\n\";","\tprint STDERR \" TABLE  Table from vcftable.pl\\n\";","\tprint STDERR \"  CASE  Case file/directory\\n\";","\tprint STDERR \"Options:\\n\";","\tprint STDERR \"    -b  Output in (b)ed format\\n\";","\tprint STDERR \"    -c  cytoband file for removing telomere\\n\";","\tprint STDERR \"    -d  Exclude insertion/(d)eletion\\n\";","\tprint STDERR \"    -f  (f)ull option\\n\";","\tprint STDERR \"    -h  Display this (h)elp\\n\";","\tprint STDERR \"    -m  hom/het/dup (m)ode stretch (default=hom)\\n\";","\tprint STDERR \"    -o  (o)utput directory (default='out')\\n\";","\tprint STDERR \"    -p  (p)ickup number (default>=1)\\n\";","\tprint STDERR \"    -r  Minimum (r)egion size (default=1,000,000bp)\\n\";","\tprint STDERR \"    -R  Maximum (R)egion size\\n\";","\tprint STDERR \"    -s  (s)kip count (default=0)\\n\";","\tprint STDERR \"\\n\";","\tprint STDERR \"Author: akira.hasegawa\\@riken.jp\\n\";","\tprint STDERR \"Update: $program_version\\n\";","\tprint STDERR \"\\n\";","\tprint STDERR \"Example: $program_name -b -d -f -m het -o output -p 2 -r 2000000 -s 2 fulltable.txt case\\n\";","\tprint STDERR \"  - Output in BED format\\n\";","\tprint STDERR \"  - Exclude indel from calculation\\n\";","\tprint STDERR \"  - Output in full format (additional length, hit and detail columns)\\n\";","\tprint STDERR \"  - het stretch mode\\n\";","\tprint STDERR \"  - Write files to output directory\\n\";","\tprint STDERR \"  - Needs at least two matches in between\\n\";","\tprint STDERR \"  - Region length have to be more than 2000000 bp\\n\";","\tprint STDERR \"  - Accept region upto two mismatch\\n\";","\tprint STDERR \"  - fulltable.txt from vcftable.pl output\\n\";","\tprint STDERR \"  - VCF files under case directory\\n\";","\tprint STDERR \"\\n\";","}","############################## MAIN ##############################","if($ARGV[0]eq\"sortsubs\"){sortSubs();exit();}","elsif(defined($opt_h)||scalar(@ARGV)<2){help();exit();}","my $filepath=$ARGV[0];","my @caseNames=split(/,/,$ARGV[1]);","my $noindel=$opt_d;","my $stretchMode=defined($opt_m)?lc($opt_m):\"hom\";","my $outDir=defined($opt_o)?$opt_o:'out';","my $pickupNumber=defined($opt_p)?$opt_p:1;","my $minRegionSize=defined($opt_r)?$opt_r:1000000;","my $maxRegionSize=defined($opt_R)?$opt_R:undef;","my $skipCount=defined($opt_s)?$opt_s:0;","my $bedformat=$opt_b;","my $fullMode=$opt_f;","my $outdir=(defined($opt_o))?$opt_o:\"out\";","if(scalar(@caseNames)==0){","\tprint STDERR \"\\n\";","\tprint STDERR \"ERROR  No VCF files were found.\\n\";","\tprint STDERR \"ERROR  Make sure you specify correct CASE file(s)/directory in the command line.\\n\";","\thelp();","\texit(1);","}","if(!-e $filepath){","\tprint STDERR \"\\n\";","\tprint STDERR \"ERROR  Table file '$filepath' doesn't exist.\\n\";","\tprint STDERR \"ERROR  Make sure you specify correct TABLE in the command line.\\n\";","\thelp();","\texit(1);","}","mkdir($outDir);","#go through files","my $regionCount=0;","my @tableFiles=();","if(-d $filepath){@tableFiles=getFiles($filepath);}","else{@tableFiles=($filepath);}","my $writers;","foreach my $tableFile(@tableFiles){","\tmy ($handler,$labels)=openTable($tableFile);","\tif(!defined($writers)){","\t\t$writers=matchIndex(\\@caseNames,$labels,$outDir,$stretchMode,$noindel,$pickupNumber,$minRegionSize,$maxRegionSize,$skipCount,$fullMode,$bedformat);","\t}","\twhile(!eof($handler->[0])){","\t\t$regionCount+=checkRegion(nextTable($handler,$writers,$noindel),$writers,$stretchMode,$pickupNumber,$minRegionSize,$maxRegionSize,$skipCount,$fullMode,$bedformat);","\t\t$regionCount++;","\t\tif($regionCount%10000==0){print STDERR \"$regionCount...\\n\";}","\t}","}","print STDERR \"Total number of regions: $regionCount\\n\";","foreach my $writer(@{$writers}){close($writer->[2]);}","print STDERR \"Completed\\n\";","############################## absolutePath ##############################","sub absolutePath{","\tmy $path=shift();","\tmy $directory=dirname($path);","\tmy $filename=basename($path);","\treturn Cwd::abs_path($directory).\"/$filename\";","}","############################## checkRegion ##############################","# centromereは後の工程で省いている。途中のfindrun/HDRでは除いていない。pickupNumberを指定して行っていた","#1,000,000 big deletion　これまで　それぞれのSNPの重要性が下がる","#500-2000 small deletion IN/DEL　これから　一つのSNPが重要になってくる　目視で","#hom =     INS DEL 個別のチェックこれが必要？","#hom =         DEL 個別のチェックこれが必要？","#hom =     INS     個別のチェックこれも必要？","#hom = SNP/INS/DEL noindel=F　現在の設定","#hom = SNP         noindel=T　現在の設定（これを使っていた）","#hom hom hom hom het","#|-------------|","#het het het het hom","#|-------------|","sub checkRegion{","\tmy $positions=shift();","\tmy $writers=shift();","\tmy $stretchMode=shift();","\tmy $pickupNumber=shift();","\tmy $minRegionSize=shift();","\tmy $maxRegionSize=shift();","\tmy $skipCount=shift();","\tmy $fullMode=shift();","\tmy $bedFormat=shift();","\tmy $startFlag=($stretchMode eq \"hom\")?2:1;","\tmy $endFlag=($stretchMode eq \"hom\")?1:2;","\tif($stretchMode eq \"dup\"){","\t\t$startFlag=512;","\t\t$endFlag=2;","\t}","\tmy $size=scalar(@{$positions});","\tmy $count=0;","\tmy $index=0;","\tforeach my $handler(@{$writers}){","\t\tmy $label=$handler->[0];","\t\t$index+=1;#=$handler->[1];","\t\tmy $writer=$handler->[2];","\t\tmy $lastChromosome;","\t\tmy $lastEnd;","\t\tfor(my $i=0;$i<$size;$i++){","\t\t\tmy $chromosome=$positions->[$i]->[0];","\t\t\tmy $start=$positions->[$i]->[1];","\t\t\tmy $flag=$positions->[$i]->[$index];","\t\t\tif(($flag&$startFlag)>0){#start search","\t\t\t\tmy $string=$flag;","\t\t\t\tmy $end=$start;","\t\t\t\tmy $match=0;","\t\t\t\tmy $mismatch=0;","\t\t\t\tfor(my $j=$i+1;$j<$size;$j++){","\t\t\t\t\tmy $length=$end-$start+1;","\t\t\t\t\tmy $flag2=$positions->[$j]->[$index];","\t\t\t\t\tif(($flag2&$startFlag)>0){#continue search","\t\t\t\t\t\t$end=$positions->[$j]->[1];","\t\t\t\t\t\t$match++;","\t\t\t\t\t}elsif(($flag2&$endFlag)>0){#end search","\t\t\t\t\t\tif($mismatch<$skipCount){#search more","\t\t\t\t\t\t\tif($flag2>0){$string.=\" $flag2\";}","\t\t\t\t\t\t\t$mismatch++;","\t\t\t\t\t\t\tnext;","\t\t\t\t\t\t}","\t\t\t\t\t\tif($length<$minRegionSize){last;}","\t\t\t\t\t\tif(defined($maxRegionSize)&&$length>$maxRegionSize){last;}","\t\t\t\t\t\tif($match<=$pickupNumber){last;}","\t\t\t\t\t\tif($chromosome eq $lastChromosome && $end == $lastEnd){last;}","\t\t\t\t\t\tif($bedFormat){","\t\t\t\t\t\t\tmy $s=$start-1;","\t\t\t\t\t\t\tmy $name=\"$chromosome:$s-$end\";","\t\t\t\t\t\t\tif($match>1000){$match=1000;}","\t\t\t\t\t\t\tprint $writer \"$chromosome\\t$s\\t$end\\t$name\\t$match\\n\";","\t\t\t\t\t\t}else{","\t\t\t\t\t\t\tprint $writer \"$chromosome\\t$start\\t$end\";","\t\t\t\t\t\t\t$match--;","\t\t\t\t\t\t\tif(defined($fullMode)){print $writer \"\\t$length\\t$match\\t$mismatch\\t$string\";}","\t\t\t\t\t\t\tprint $writer \"\\n\";","\t\t\t\t\t\t}","\t\t\t\t\t\t$lastEnd=$end;","\t\t\t\t\t\t$lastChromosome=$chromosome;","\t\t\t\t\t\t$count++;","\t\t\t\t\t\tlast;","\t\t\t\t\t}","\t\t\t\t\tif($flag2>0){$string.=\" $flag2\";}","\t\t\t\t}","\t\t\t}","\t\t}","\t}","\treturn $count;","}","############################## getBasename ##############################","sub getBasename{","\tmy $file=shift();","\tmy $basename=basename($file);","\tif($basename=~/^(.+)\\.g\\.vcf$/i){$basename=$1}","\telsif($basename=~/^(.+)\\.vcf$/i){$basename=$1}","\telsif($basename=~/^(.+)\\.bcf$/i){$basename=$1}","\telsif($basename=~/^(.+)\\.avinput$/i){$basename=$1}","\treturn $basename;","}","############################## getDate ##############################","sub getDate{","\tmy $delim=shift();","\tmy $time=shift();","\tif(!defined($delim)){$delim=\"\";}","\tif(!defined($time)||$time eq \"\"){$time=localtime();}","\telse{$time=localtime($time);}","\tmy $year=$time->year+1900;","\tmy $month=$time->mon+1;","\tif($month<10){$month=\"0\".$month;}","\tmy $day=$time->mday;","\tif($day<10){$day=\"0\".$day;}","\treturn $year.$delim.$month.$delim.$day;","}","############################## getFiles ##############################","sub getFiles{","\tmy $directory=shift();","\tmy $grep=shift();","\tmy @files=();","\topendir(DIR,$directory);","\tif(ref($grep)eq\"ARRAY\"){","\t\tforeach my $file(readdir(DIR)){","\t\t\tif($file=~/^\\./){next;}","\t\t\tif($file eq\"\"){next;}","\t\t\tmy $path=\"$directory/$file\";","\t\t\tif(-d $path){next;}","\t\t\tmy $hit=0;","\t\t\tforeach my $g(@{$grep}){if($path=~/$g/){$hit=1;}}","\t\t\tif($hit){push(@files,$path);}","\t\t}","\t}else{","\t\tforeach my $file(readdir(DIR)){","\t\t\tif($file=~/^\\./){next;}","\t\t\tif($file eq\"\"){next;}","\t\t\tmy $path=\"$directory/$file\";","\t\t\tif(-d $path){next;}","\t\t\tif(defined($grep)&&$path!~/$grep/){next;}","\t\t\tpush(@files,$path);","\t\t}","\t}","\tclosedir(DIR);","  return sort{$a cmp $b}@files;","}","############################## listFiles ##############################","sub listFiles{","\tmy @input_directories=@_;","\tmy $file_suffix=shift(@input_directories);","\tmy @input_files=();","\tforeach my $input_directory (@input_directories){","\t\t$input_directory=absolutePath($input_directory);","\t\tif(-f $input_directory){push(@input_files,$input_directory);next;}","\t\telsif(-l $input_directory){push(@input_files,$input_directory);next;}","\t\topendir(DIR,$input_directory);","\t\tforeach my $file(readdir(DIR)){","\t\t\tif($file eq \".\"){next;}","\t\t\tif($file eq \"..\") {next;}","\t\t\tif($file eq \"\"){next;}","\t\t\t$file=\"$input_directory/$file\";","\t\t\tif(-d $file){next;}","\t\t\telsif($file!~/$file_suffix$/){next;}","\t\t\tpush(@input_files,$file);","\t\t}","\t\tclosedir(DIR);","\t}","\treturn sort(@input_files);","}","############################## matchIndex ##############################","sub matchIndex{","\tmy $files=shift();","\tmy $labels=shift();","\tmy $outDir=shift();","\tmy $stretchMode=shift();","\tmy $noindel=shift();","\tmy $pickupNumber=shift();","\tmy $minRegionSize=shift();","\tmy $maxRegionSize=shift();","\tmy $skipCount=shift();","\tmy $fullMode=shift();","\tmy $bedformat=shift();","\tmy $names={};","\tforeach my $file(@{$files}){","\t\t\tmy $basename=basename($file);","\t\t\tif($basename=~/^(.+)\\.g\\.vcf$/i){$basename=$1}","\t\t\telsif($basename=~/^(.+)\\.vcf$/i){$basename=$1}","\t\t\telsif($basename=~/^(.+)\\.bcf$/i){$basename=$1}","\t\t\telsif($basename=~/^(.+)\\.avinput$/i){$basename=$1}","\t\t\t$names->{$basename}=1;","\t}","\tmy @array=();","\tfor(my $i=0;$i<scalar(@{$labels});$i++){","\t\t\tmy $label=$labels->[$i];","\t\t\tif(!exists($names->{$label})){next;}","\t\t\tmy $filename=\"$label.${stretchMode}_pick${pickupNumber}_skip${skipCount}\";","\t\t\tif(defined($maxRegionSize)){$filename.=\"_min${minRegionSize}_max${maxRegionSize}\";}","\t\t\telse{$filename.=\"_min${minRegionSize}\";}","\t\t\tif(defined($noindel)){$filename.=\"_noindel\";}","\t\t\tif(defined($fullMode)){$filename.=\"_full\";}","\t\t\tif(defined($bedformat)){$filename.=\".bed\";}","\t\t\telse{$filename.=\".txt\";}","\t\t\tmy $writer=IO::File->new(\">$outDir/$filename\");","\t\t\tif(defined($bedformat)){}","\t\t\telsif(defined($fullMode)){print $writer \"#Chr\\tStart\\tEnd\\tLength\\tHit\\tUnhit\\tGenotype\\n\";}","\t\t\telse{print $writer \"#Chr\\tStart\\tEnd\\n\";}","\t\t\tpush(@array,[$label,$i+2,$writer]);","\t}","\treturn \\@array;","}","############################## nextTable ##############################","sub nextTable{","\tmy $handler=shift();","\tmy $writers=shift();","\tmy $noindel=shift();","\tmy @indeces=();","\t#These lines are added to reduce memory usage","\tforeach my $handler(@{$writers}){push(@indeces,$handler->[1]);}","\tmy $reader=$handler->[0];","\tmy $next=$handler->[1];","\tif(!defined($next)){return ();}","\tmy @data=@{$next};","\tmy $chromosome=shift(@data);","\tmy $position=shift(@data);","\tmy @positions=([$chromosome,$position,@data]);","\tmy $endReached=0;","\twhile(<$reader>){","\t\t\tchomp;s/\\r//g;","\t\t\tmy ($chr,$pos,$ref,$alt,@data)=split(/\\t/);","\t\t\tmy @temp=();","\t\t\tforeach my $index(@indeces){push(@temp,$data[$index-2]);}","\t\t\tif($chr ne $chromosome){$handler->[1]=[$chr,$pos,@temp];last;}","\t\t\tif(defined($noindel)){#take care of indel","\t\t\t\t\tforeach my $d(@data){if(($d&4)>0||($d&8)>0){$d=0;}}","\t\t\t}","\t\t\tpush(@positions,[$chr,$pos,@temp]);","\t}","\tif(eof($reader)){close($reader);$handler->[1]=undef;}","\treturn \\@positions;","}","############################## openFile ##############################","sub openFile{","\tmy $path=shift();","\tif($path=~/^(.+\\@.+)\\:(.+)$/){","\t\tif($path=~/\\.gz(ip)?$/){return IO::File->new(\"ssh $1 'gzip -cd $2'|\");}","\t\telsif($path=~/\\.bz(ip)?2$/){return IO::File->new(\"ssh $1 'bzip2 -cd $2'|\");}","\t\telsif($path=~/\\.bam$/){return IO::File->new(\"ssh $1 'samtools view $2'|\");}","\t\telse{return IO::File->new(\"ssh $1 'cat $2'|\");}","\t}else{","\t\tif($path=~/\\.gz(ip)?$/){return IO::File->new(\"gzip -cd $path|\");}","\t\telsif($path=~/\\.bz(ip)?2$/){return IO::File->new(\"bzip2 -cd $path|\");}","\t\telsif($path=~/\\.bam$/){return IO::File->new(\"samtools view $path|\");}","\t\telse{return IO::File->new($path);}","\t}","}","############################## openTable ##############################","sub openTable{","\tmy $file=shift();","\tmy $reader;","\tif($file=~/\\.g(ip)?z$/){$reader=IO::File->new(\"gzip -cd $file|\");}","\telsif($file=~/\\.b(ip)?z2$/){$reader=IO::File->new(\"bzip2 -cd $file|\");}","\telse{$reader=IO::File->new($file);}","\tmy $line=<$reader>;","\tchomp($line);","\t$line=~s/\\r//g;","\tmy @names=split(/\\t/,$line);","\tshift(@names);#chr","\tshift(@names);#pos","\tshift(@names);#ref","\tshift(@names);#alt","\t$line=<$reader>;","\tchomp($line);","\t$line=~s/\\r//g;","\tmy @tokens=split(/\\t/,$line);","\treturn ([$reader,\\@tokens],\\@names);","}","############################## sortSubs ##############################","sub sortSubs{","\tmy $path=\"$program_directory/$program_name\";","\tmy $reader=openFile($path);","\tmy @headers=();","\tmy $name;","\tmy $blocks={};","\tmy $block=[];","\tmy $date=getDate(\"/\");","\tmy @orders=();","\twhile(<$reader>){","\t\tchomp;s/\\r//g;","\t\tif(/^#{30}\\s*(\\S+)\\s*#{30}$/){","\t\t\t$name=$1;","\t\t\tif($name!~/^[A-Z]+$/){push(@{$block},$_);last;}","\t\t}elsif(/^my \\$program_version=\\\"\\S+\\\";/){$_=\"my \\$program_version=\\\"$date\\\";\";}","\t\tpush(@headers,$_);","\t}","\twhile(<$reader>){","\t\tchomp;s/\\r//g;","\t\tif(/^#{30}\\s*(\\S+)\\s*#{30}$/){","\t\t\t$blocks->{$name}=$block;","\t\t\tpush(@orders,$name);","\t\t\t$name=$1;","\t\t\t$block=[];","\t\t}","\t\tpush(@{$block},$_);","\t}","\tclose($reader);","\tif(defined($name)){$blocks->{$name}=$block;push(@orders,$name);}","\tmy ($writer,$file)=tempfile(DIR=>\"/tmp\",SUFFIX=>\".pl\");","\tforeach my $line(@headers){print $writer \"$line\\n\";}","\tforeach my $key(sort{$a cmp $b}@orders){foreach my $line(@{$blocks->{$key}}){print $writer \"$line\\n\";}}","\tclose($writer);","\treturn system(\"mv $file $path\");","}"],"https://moirai2.github.io/schema/daemon/script/name":"findrun.pl"},"https://moirai2.github.io/schema/daemon/sleeptime":"60","https://moirai2.github.io/schema/daemon/userdefined":{"output":"$project/findrun/$filename"}}
