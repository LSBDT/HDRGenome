{"https://moirai2.github.io/schema/daemon/bash":["basename=`basename $region .txt`","output=$project/region/$basename.exclude.txt","selectVcftable.pl -v $region $exclude > $output","echo \"UPDATE $case->$project/region->$output\""],"https://moirai2.github.io/schema/daemon/input":["case","exclude","project","region"],"https://moirai2.github.io/schema/daemon/approximate/time":"1","https://moirai2.github.io/schema/daemon/query/in":["$case->$project/region->$region","$project->findrun#exclude->$exclude"],"https://moirai2.github.io/schema/daemon/query/out":"$case->$project/completed->excludeRegion","https://moirai2.github.io/schema/daemon/dagdb":"db","https://moirai2.github.io/schema/daemon/script":{"https://moirai2.github.io/schema/daemon/script/code":["#!/usr/bin/perl","use strict 'vars';","use Cwd;","use File::Basename;","use File::Temp qw/tempfile tempdir/;","use FileHandle;","use Getopt::Std;","use IO::File;","use Time::localtime;","############################## HEADER ##############################","my ($program_name,$program_directory,$program_suffix)=fileparse($0);","$program_directory=Cwd::abs_path($program_directory);","my $program_path=\"$program_directory/$program_name\";","my $program_version=\"2024/06/13\";","############################## OPTIONS ##############################","use vars qw($opt_c $opt_C $opt_f $opt_g $opt_h $opt_o $opt_r $opt_s $opt_S $opt_u $opt_v);","getopts('cCfgho:rsSuv');","############################## HELP ##############################","sub help{","\tprint STDERR \"\\n\";","\tprint STDERR \"Command: $program_name [option] FILE BED\\n\";","\tprint STDERR \"Arguments:\\n\";","\tprint STDERR \"  FILE  Table from vcftable.pl or position/region file from findrun.pl or genomecov.pl\\n\";","\tprint STDERR \"   BED  Bed file to include/exclude\\n\";","\tprint STDERR \"Options:\\n\";","\tprint STDERR \"\t-c Reporting the number of overlapping features\\n\";","\tprint STDERR \"\t-C Reporting the number of overlapping features for each database file\\n\";","\tprint STDERR \"\t-f Requiring a minimal overlap fraction\\n\";","\tprint STDERR \"\t-g Define an alternate chromosome sort order via a genome file.\\n\";","\tprint STDERR \"\t-o Options for 'wa,wb,loj,wo,wao,abam,ubam,bed,split,sorted,header'\\n\";","\tprint STDERR \"\t-r, and -f Requiring reciprocal minimal overlap fraction\\n\";","\tprint STDERR \"\t-s Enforcing same strandedness\\n\";","\tprint STDERR \"\t-S Enforcing opposite \\\"strandedness\\\"\\n\";","\tprint STDERR \"\t-u (unique) Reporting the mere presence of any overlapping features\\n\";","\tprint STDERR \"\t-v Reporting the absence of any overlapping features\\n\";","\tprint STDERR \"\\n\";","\tprint STDERR \"Author: akira.hasegawa\\@riken.jp\\n\";","\tprint STDERR \"Update: $program_version\\n\";","\tprint STDERR \"\\n\";","}","############################## MAIN ##############################","if($ARGV[0]eq\"sortsubs\"){sortSubs();exit();}","elsif($ARGV[0]eq\"test\"){test();exit();}","elsif(defined($opt_h)||scalar(@ARGV)<2){help();exit();}","my $vcfFile=shift(@ARGV);","my $bedFileB=shift(@ARGV);","my ($label,$bedFileA)=convertToBed($vcfFile);","my $intersectBed=intersectBed($bedFileA,$bedFileB);","my $intersectFile=convertFromBed($label,$intersectBed);","system(\"cat $intersectFile\");","############################## convertFromBed ##############################","sub convertFromBed{","\tmy $label=shift();","\tmy $bedFile=shift();","\tmy $format=getFormatFromFilename($bedFile);","\tmy $reader=openFile($bedFile);","\tmy ($writer,$tmpfile)=tempfile(TEMPLATE=>\"${format}_XXXXXX\",DIR=>\"/tmp\",SUFFIX=>\".txt\",UNLINK=>1);","\tprint $writer \"$label\\n\";","\tif($format eq \"position\"){","\t\twhile(<$reader>){","\t\t\tchomp;s/\\r//g;","\t\t\tmy ($chr,$start,$end)=split(/\\t/);","\t\t\tprint $writer \"$chr\\t$start\\n\";","\t\t}","\t}elsif($format eq \"region\"){","\t\twhile(<$reader>){","\t\t\tchomp;s/\\r//g;","\t\t\tmy ($chr,$start,$end)=split(/\\t/);","\t\t\tprint $writer \"$chr\\t$start\\t$end\\n\";","\t\t}","\t}elsif($format eq \"vcftable\"){","\t\twhile(<$reader>){","\t\t\tchomp;s/\\r//g;","\t\t\tmy ($chr,$start,$end,$ref,$alt,@counts)=split(/\\t/);","\t\t\tprint $writer \"$chr\\t$start\\t$ref\\t$alt\\t\".join(\"\\t\",@counts).\"\\n\";","\t\t}","\t}","\tclose($writer);","\tclose($reader);","\treturn $tmpfile;","}","############################## convertToBed ##############################","sub convertToBed{","\tmy $file=shift();","\tmy $reader=openFile($file);","\t#CHROM\tPOS (position)","\t#Chr\tStart\tEnd (region)","\t#chromosome\tposition reference alternative\tNA18939_v2 .. (vcftable)","\tmy $label=<$reader>;","\tchomp($label);","    my $format;","    if($label eq \"#CHROM\\tPOS\"){$format=\"position\";}","    elsif($label eq \"#Chr\\tStart\\tEnd\"){$format=\"region\";}","    elsif($label=~/^#chromosome\\tposition\\t/){$format=\"vcftable\";}","    elsif($label!~/^#/){print STDERR \"Error: $file is not a valid file\\n\";exit(1);}","\tmy @tokens=split(/\\t/,$label);","\tif(scalar(@tokens)<=1){","\t\tprint STDERR \"Error: $file is not a valid file\\n\";","\t\texit(1);","\t}","\t\tif(!defined($format)){","\t\t\tif(scalar(@tokens)==2){$format=\"position\";}","\t\t\telsif(scalar(@tokens)==3){$format=\"region\";}","\t\t\telsif(scalar(@tokens>=4)){$format=\"vcftable\";}","\t\t}","\tmy ($writer,$tmpfile)=tempfile(TEMPLATE=>\"${format}_XXXXXX\",DIR=>\"/tmp\",SUFFIX=>\".bed\",UNLINK=>1);","\tif($format eq \"position\"){","\t\twhile(<$reader>){","\t\t\tchomp;s/\\r//g;","\t\t\tmy ($chr,$position)=split(/\\t/);","\t\t\tprint $writer \"$chr\\t$position\\t\".($position+1).\"\\n\";","\t\t}","\t}elsif($format eq \"region\"){","\t\twhile(<$reader>){","\t\t\tchomp;s/\\r//g;","\t\t\tmy ($chr,$start,$end)=split(/\\t/);","\t\t\tprint $writer \"$chr\\t$start\\t$end\\n\";","\t\t}","\t}elsif($format eq \"vcftable\"){","\t\twhile(<$reader>){","\t\t\tchomp;s/\\r//g;","\t\t\tmy ($chr,$position,$ref,$alt,@counts)=split(/\\t/);","\t\t\tprint $writer \"$chr\\t$position\\t\".($position+1).\"\\t$ref\\t$alt\\t\".join(\"\\t\",@counts).\"\\n\";","\t\t}","\t}","\tclose($reader);","\treturn ($label,$tmpfile);","}","############################## createFile ##############################","sub createFile{","\tmy @lines=@_;","\tmy $path=shift(@lines);","\tmkdirs(dirname($path));","\topen(OUT,\">$path\");","\tforeach my $line(@lines){print OUT \"$line\\n\";}","\tclose(OUT);","}","############################## getDate ##############################","sub getDate{","\tmy $delim=shift();","\tmy $time=shift();","\tif(!defined($delim)){$delim=\"\";}","\tif(!defined($time)||$time eq \"\"){$time=localtime();}","\telse{$time=localtime($time);}","\tmy $year=$time->year+1900;","\tmy $month=$time->mon+1;","\tif($month<10){$month=\"0\".$month;}","\tmy $day=$time->mday;","\tif($day<10){$day=\"0\".$day;}","\treturn $year.$delim.$month.$delim.$day;","}","############################## getFormatFromFilename ##############################","sub getFormatFromFilename{","\tmy $file=shift();","\tmy $basename=basename($file,\".bed\");","\tmy @tokens=split(/_/,$basename);","\tmy $format=shift(@tokens);","\treturn $format;","}","############################## intersectBed ##############################","#https://bedtools.readthedocs.io/en/latest/content/tools/intersect.html","sub intersectBed{","\tmy $bedFileA=shift();","\tmy $bedFileB=shift();","\tmy $format=getFormatFromFilename($bedFileA);","\tmy $command=\"bedtools intersect -wa\";","\tmy $booleanV=0;","\tif(defined($opt_u)){$command.=\" -u\";}","\tif(defined($opt_c)){$command.=\" -c\";}","\tif(defined($opt_C)){$command.=\" -C\";}","\tif(defined($opt_v)){$command.=\" -v\";$booleanV=1;}","\tif(defined($opt_f)){$command.=\" -f\";}","\tif(defined($opt_r)){$command.=\" -r\";}","\tif(defined($opt_s)){$command.=\" -s\";}","\tif(defined($opt_S)){$command.=\" -S\";}","\tif(defined($opt_g)){$command.=\" -g\";}","\tif(defined($opt_o)){","\t\tmy @options=split(/,/,$opt_o);","\t\tforeach my $option(@options){","\t\t\tif($option eq \"v\"){$booleanV=1;}","\t\t\t$command.=\" -$option\";","\t\t}","\t}","\tif($booleanV==0){$command.=\" -u\";}","\t$command.=\" -a $bedFileA -b $bedFileB\";","\tmy ($writer,$tmpfile)=tempfile(TEMPLATE=>\"${format}_XXXXXX\",DIR=>\"/tmp\",SUFFIX=>\".bed\",UNLINK=>1);","\tclose($writer);","\t$command.=\" > $tmpfile\";","\tsystem($command);","\treturn $tmpfile;","}","############################## mkdirs ##############################","sub mkdirs{","\tmy @directories=@_;","\tforeach my $directory(@directories){","\t\tif($directory=~/^(.+)\\@(.+)\\:(.+)/){system(\"ssh $1\\@$2 'mkdir -p $3'\");}","\t\telse{system(\"mkdir -p $directory\");}","\t}","\treturn 1;","}","############################## openFile ##############################","sub openFile{","\tmy $path=shift();","\tif($path=~/^(.+\\@.+)\\:(.+)$/){","\t\tif($path=~/\\.gz(ip)?$/){return IO::File->new(\"ssh $1 'gzip -cd $2'|\");}","\t\telsif($path=~/\\.bz(ip)?2$/){return IO::File->new(\"ssh $1 'bzip2 -cd $2'|\");}","\t\telsif($path=~/\\.bam$/){return IO::File->new(\"ssh $1 'samtools view $2'|\");}","\t\telse{return IO::File->new(\"ssh $1 'cat $2'|\");}","\t}else{","\t\tif($path=~/\\.gz(ip)?$/){return IO::File->new(\"gzip -cd $path|\");}","\t\telsif($path=~/\\.bz(ip)?2$/){return IO::File->new(\"bzip2 -cd $path|\");}","\t\telsif($path=~/\\.bam$/){return IO::File->new(\"samtools view $path|\");}","\t\telse{return IO::File->new($path);}","\t}","}","############################## printTable ##############################","sub printTable{","\tmy @out=@_;","\tmy $return_type=$out[0];","\tif(lc($return_type) eq \"print\"){$return_type=0;shift(@out);}","\telsif(lc($return_type) eq \"array\"){$return_type=1;shift(@out);}","\telsif(lc($return_type) eq \"stderr\"){$return_type=2;shift(@out);}","\telse{$return_type= 2;}","\tprintTableSub($return_type,\"\",@out);","}","sub printTableSub{","\tmy @out=@_;","\tmy $return_type=shift(@out);","\tmy $string=shift(@out);","\tmy @output=();","\tfor(@out){","\t\tif(ref($_)eq\"ARRAY\"){","\t\t\tmy @array=@{$_};","\t\t\tmy $size=scalar(@array);","\t\t\tif($size==0){","\t\t\t\tif($return_type==0){print $string.\"[]\\n\";}","\t\t\t\telsif($return_type==1){push(@output,$string.\"[]\");}","\t\t\t\telsif($return_type==2){print STDERR $string.\"[]\\n\";}","\t\t\t}else{","\t\t\t\tfor(my $i=0;$i<$size;$i++){push(@output,printTableSub($return_type,$string.\"[$i]=>\\t\",$array[$i]));}","\t\t\t}","\t\t} elsif(ref($_)eq\"HASH\"){","\t\t\tmy %hash=%{$_};","\t\t\tmy @keys=sort{$a cmp $b}keys(%hash);","\t\t\tmy $size=scalar(@keys);","\t\t\tif($size==0){","\t\t\t\tif($return_type==0){print $string.\"{}\\n\";}","\t\t\t\telsif($return_type==1){push( @output,$string.\"{}\");}","\t\t\t\telsif($return_type==2){print STDERR $string.\"{}\\n\";}","\t\t\t}else{","\t\t\t\tforeach my $key(@keys){push(@output,printTableSub($return_type,$string.\"{$key}=>\\t\",$hash{$key}));}","\t\t\t}","\t\t}elsif($return_type==0){print \"$string\\\"$_\\\"\\n\";}","\t\telsif($return_type==1){push( @output,\"$string\\\"$_\\\"\");}","\t\telsif($return_type==2){print STDERR \"$string\\\"$_\\\"\\n\";}","\t}","\treturn wantarray?@output:$output[0];","}","############################## readText ##############################","sub readText{","\tmy $file=shift();","\tmy $text=\"\";","\topen(IN,$file);","\twhile(<IN>){s/\\r//g;$text.=$_;}","\tclose(IN);","\treturn $text;","}","############################## sortSubs ##############################","sub sortSubs{","\tmy $path=\"$program_directory/$program_name\";","\tmy $reader=openFile($path);","\tmy @headers=();","\tmy $name;","\tmy $blocks={};","\tmy $block=[];","\tmy $date=getDate(\"/\");","\tmy @orders=();","\twhile(<$reader>){","\t\tchomp;s/\\r//g;","\t\tif(/^#{30}\\s*(\\S+)\\s*#{30}$/){","\t\t\t$name=$1;","\t\t\tif($name!~/^[A-Z]+$/){push(@{$block},$_);last;}","\t\t}elsif(/^my \\$program_version=\\\"\\S+\\\";/){$_=\"my \\$program_version=\\\"$date\\\";\";}","\t\tpush(@headers,$_);","\t}","\twhile(<$reader>){","\t\tchomp;s/\\r//g;","\t\tif(/^#{30}\\s*(\\S+)\\s*#{30}$/){","\t\t\t$blocks->{$name}=$block;","\t\t\tpush(@orders,$name);","\t\t\t$name=$1;","\t\t\t$block=[];","\t\t}","\t\tpush(@{$block},$_);","\t}","\tclose($reader);","\tif(defined($name)){$blocks->{$name}=$block;push(@orders,$name);}","\tmy ($writer,$file)=tempfile(DIR=>\"/tmp\",SUFFIX=>\".pl\");","\tforeach my $line(@headers){print $writer \"$line\\n\";}","\tforeach my $key(sort{$a cmp $b}@orders){foreach my $line(@{$blocks->{$key}}){print $writer \"$line\\n\";}}","\tclose($writer);","\treturn system(\"mv $file $path\");","}","############################## test ##############################","sub test{","\t#testing basic input and output functionality","\tcreateFile(\"test/select.bed\",\"chr1\\t100\\t200\");","    #position","\tcreateFile(\"test/position.txt\",\"#CHROM\\tPOS\",\"chr1\\t1\",\"chr1\\t99\",\"chr1\\t100\",\"chr1\\t101\",\"chr1\\t199\",\"chr1\\t200\",\"chr1\\t201\");","\ttestCommand(\"perl $program_directory/selectVcftable.pl test/position.txt test/select.bed\",\"#CHROM\\tPOS\",\"chr1\\t100\",\"chr1\\t101\",\"chr1\\t199\");","\ttestCommand(\"perl $program_directory/selectVcftable.pl -o 'v' test/position.txt test/select.bed\",\"#CHROM\\tPOS\",\"chr1\\t1\",\"chr1\\t99\",\"chr1\\t200\",\"chr1\\t201\");","    #region","\tcreateFile(\"test/region.txt\",\"#Chr\\tStart\\tEnd\",\"chr1\\t1\\t2\",\"chr1\\t99\\t100\",\"chr1\\t100\\t101\",\"chr1\\t101\\t102\",\"chr1\\t199\\t200\",\"chr1\\t200\\t201\",\"chr1\\t201\\t202\");","    testCommand(\"perl $program_directory/selectVcftable.pl test/region.txt test/select.bed\",\"#Chr\\tStart\\tEnd\",\"chr1\\t100\\t101\",\"chr1\\t101\\t102\",\"chr1\\t199\\t200\");","\ttestCommand(\"perl $program_directory/selectVcftable.pl -o 'v' test/region.txt test/select.bed\",\"#Chr\\tStart\\tEnd\",\"chr1\\t1\\t2\",\"chr1\\t99\\t100\",\"chr1\\t200\\t201\",\"chr1\\t201\\t202\");","    #vcftable","\tcreateFile(\"test/vcftable.txt\",\"#chromosome\\tposition\\tA\\tB\\tC\",\"chr1\\t1\\t0\\t0\\t1\",\"chr1\\t99\\t0\\t1\\t1\",\"chr1\\t100\\t1\\t1\\t1\",\"chr1\\t101\\t1\\t1\\t2\",\"chr1\\t199\\t1\\t2\\t2\",\"chr1\\t200\\t2\\t2\\t2\",\"chr1\\t201\\t2\\t2\\t3\");","    testCommand(\"perl $program_directory/selectVcftable.pl test/vcftable.txt test/select.bed\",\"#chromosome\\tposition\\tA\\tB\\tC\",\"chr1\\t100\\t1\\t1\\t1\",\"chr1\\t101\\t1\\t1\\t2\",\"chr1\\t199\\t1\\t2\\t2\");","    testCommand(\"perl $program_directory/selectVcftable.pl -o 'v' test/vcftable.txt test/select.bed\",\"#chromosome\\tposition\\tA\\tB\\tC\",\"chr1\\t1\\t0\\t0\\t1\",\"chr1\\t99\\t0\\t1\\t1\",\"chr1\\t200\\t2\\t2\\t2\",\"chr1\\t201\\t2\\t2\\t3\");","}","############################## testCommand ##############################","sub testCommand{","\tmy @values=@_;","\tmy $command=shift(@values);","\tmy $value2=join(\"\\n\",@values);","\tmy ($writer,$file)=tempfile(DIR=>\"/tmp\",SUFFIX=>\".txt\",UNLINK=>1);","\tclose($writer);","\tif(system(\"$command > $file\")){","\t\tprint STDERR \">$command\\n\";","\t\tprint STDERR \"Command failed...\\n\";","\t\treturn 1;","\t}","\tmy $value1=readText($file);","\tchomp($value1);","\tif($value2 eq\"\"){if($value1 eq\"\"){return 0;}}","\tif($value1 eq $value2){return 0;}","\tprint STDERR \">$command\\n\";","\tprint STDERR \"$value1\\n\";","\tprint STDERR \"$value2\\n\";","}","############################## testSub ##############################","sub testSub{","\tmy $command=shift();","\tmy $value2=shift();","\tmy $value1=eval($command);","\tif(compareValues($value1,$value2)==0){return;}","\tprint STDERR \">$command\\n\";","\tif(ref($value2)eq\"ARRAY\"||ref($value2)eq\"ARRAY\"){printTable($value1);printTable($value2);}","\telse{print STDERR \"'$value1' != '$value2'\\n\";}","}"],"https://moirai2.github.io/schema/daemon/script/name":"selectVcftable.pl"},"https://moirai2.github.io/schema/daemon/sleeptime":"60"}
