{"https://moirai2.github.io/schema/daemon/bash":["output=$tmpdir/vcftable.txt","logFile=$project/log/vcftable.txt","vcftable.pl -t $qvThreshold -o $output $indir/* 2> $logFile","echo \"INSERT root->$project/vcftable#log->$logFile\""],"https://moirai2.github.io/schema/daemon/input":["indir","project","qvThreshold"],"https://moirai2.github.io/schema/daemon/output":"output","https://moirai2.github.io/schema/daemon/query/in":["root->project->$project","$project->project#indir->$indir","$project->vcftable#qvThreshold->$qvThreshold"],"https://moirai2.github.io/schema/daemon/query/out":"root->$project/vcftable->$output","https://moirai2.github.io/schema/daemon/rdfdb":"db","https://moirai2.github.io/schema/daemon/script":{"https://moirai2.github.io/schema/daemon/script/code":["#!/usr/bin/perl","use strict 'vars';","use Cwd;","use File::Basename;","use File::Temp qw/tempfile tempdir/;","use FileHandle;","use Getopt::Std;","use IO::File;","use Time::localtime;","############################## HEADER ##############################","my ($program_name,$program_directory,$program_suffix)=fileparse($0);","$program_directory=Cwd::abs_path($program_directory);","my $program_path=\"$program_directory/$program_name\";","my $program_version=\"2022/08/27\";","############################## OPTIONS ##############################","use vars qw($opt_h $opt_o $opt_q $opt_t);","getopts('ho:qt:');","############################## HELP ##############################","sub help{","  print \"\\n\";","  print \"Command: $program_name [option] VCF [VCF2 ..]\\n\";","  print \"Arguments:\\n\";","  print \"   VCF  variant call format (VCF or GVCF or avinput) files or under directories\\n\";","  print \"Options:\\n\";","  print \"    -o  Output file (default='STDOUT')\\n\";","  print \"    -t  Quality value threshold for low quality (default<50)\\n\";","  print \"Flag:\\n\";","  print \"     0  wild\\n\";","  print \"     1  hetero\\n\";","  print \"     2  homo\\n\";","  print \"     4  deletion\\n\";","  print \"     8  insertion\\n\";","  print \"    16  multi allelic (column5.count(',')>0)\\n\";","  print \"    32  low quality (column6<QV50)\\n\";","  print \"\\n\";","  print \"Combinations:\\n\";","  print \" 1 = het(1)\\n\";","  print \" 2 = hom(2)\\n\";","  print \" 5 = het(1)+del(4)\\n\";","  print \" 6 = hom(2)+del(4)\\n\";","  print \" 9 = het(1)+ins(8)\\n\";","  print \"10 = hom(2)+ins(8)\\n\";","  print \"17 = het(1)       +multi(16)\\n\";","  print \"18 = hom(2)       +multi(16)\\n\";","  print \"21 = het(1)+del(4)+multi(16)\\n\";","  print \"22 = hom(2)+del(4)+multi(16)\\n\";","  print \"25 = het(1)+ins(8)+multi(16)\\n\";","  print \"26 = hom(2)+ins(8)+multi(16)\\n\";","  print \"33 = het(1)                 +lowqual(32)\\n\";","  print \"34 = hom(2)                 +lowqual(32)\\n\";","  print \"37 = het(1)+del(4)          +lowqual(32)\\n\";","  print \"38 = hom(2)+del(4)          +lowqual(32)\\n\";","  print \"41 = het(1)+ins(8)          +lowqual(32)\\n\";","  print \"42 = hom(2)+ins(8)          +lowqual(32)\\n\";","  print \"49 = het(1)       +multi(16)+lowqual(32)\\n\";","  print \"50 = hom(2)       +multi(16)+lowqual(32)\\n\";","  print \"53 = het(1)+del(4)+multi(16)+lowqual(32)\\n\";","  print \"54 = hom(2)+del(4)+multi(16)+lowqual(32)\\n\";","  print \"57 = het(1)+ins(8)+multi(16)+lowqual(32)\\n\";","  print \"58 = hom(2)+ins(8)+multi(16)+lowqual(32)\\n\";","  print \"\\n\";","  print \"Condition of multi allelic:\\n\";","  print \"0/1 het\\n\";","  print \"1/1 hom\\n\";","  print \"0/2 het multi-allelic\\n\";","  print \"1/2 het multi-allelic\\n\";","  print \"2/2 hom multi-allelic\\n\";","  print \"x/y hom multi-allelic (y>1 is multi allelic) (y==x is hom)\\n\";","  print \"\\n\";","  print \"Note:\\n\";","  print \"    If you are using BCF files, please install bcftools\\n\";","  print \"    http://samtools.github.io/bcftools/bcftools.html\\n\";","  print \"\\n\";","  print \"File Suffix:\\n\";","  print \"      .vcf  VCF file\\n\";","  print \"    .g.vcf  GVCF file\\n\";","  print \"  .avinput  AVINPUT file\\n\";","  print \"\\n\";","  print \"Author: akira.hasegawa\\@riken.jp\\n\";","  print \"Update: $program_version\\n\";","  print \"\\n\";","  print \"Note:\\n\";","  print \"  If only one VCF file is specified, vcftable.pl assumes VCF file has multiple entries and parse\\n\";","  print \"\\n\";","}","############################## MAIN ##############################","if($ARGV[0]eq\"sortsubs\"){sortSubs();exit();}","elsif($ARGV[0]eq\"test\"){test();exit();}","elsif(defined($opt_h)||scalar(@ARGV)<1){help();exit(1);}","my $threshold=defined($opt_t)?$opt_t:50;","my $tableFile=defined($opt_o)?$opt_o:'-';","my $tmpDir=(-e \"/tmp\")?\"/tmp\":\"tmp\";","mkdir($tmpDir);","my @vcfFiles=listFiles(\"\\\\.([vb]cf|avinput)\\$\",@ARGV);","if(scalar(@vcfFiles)>1){","  my ($splitFiles,$chromosomes,$basenames)=splitInputs($tmpDir,$threshold,@vcfFiles);","  createTable($tableFile,$splitFiles,$chromosomes,$basenames);","  foreach my $chr(keys(%{$splitFiles})){foreach my $splitFile(values(%{$splitFiles->{$chr}})){unlink($splitFile);}}","}elsif(scalar(@vcfFiles)==1){","  parseMultiVCF($tableFile,$vcfFiles[0]);","}","if($tmpDir ne \"/tmp\"){rmdir($tmpDir);}","############################## absolutePath ##############################","sub absolutePath{","\tmy $path=shift();","\tmy $directory=dirname($path);","\tmy $filename=basename($path);","\treturn Cwd::abs_path($directory).\"/$filename\";","}","############################## createFile ##############################","sub createFile{","\tmy @lines=@_;","\tmy $path=shift(@lines);","\tmkdirs(dirname($path));","\topen(OUT,\">$path\");","\tforeach my $line(@lines){print OUT \"$line\\n\";}","\tclose(OUT);","}","############################## createTable ##############################","sub createTable{","  my $tableFile=shift();","  my $splitFiles=shift();","  my $chromosomes=shift();","  my $basenames=shift();","  my $writer=IO::File->new(\">$tableFile\");","  my @labels=();","  print $writer \"#chromosome\\tposition\\t\".join(\"\\t\",@{$basenames}).\"\\n\";","  foreach my $chromosome(@{$chromosomes}){","    my @readers=();","    foreach my $basename(@{$basenames}){push(@readers,openTable($splitFiles->{$chromosome}->{$basename},$threshold));}","    my $count=0;","    while(nextTable($writer,@readers)){$count++;}","    if(!defined($opt_q)){print STDERR \"#$chromosome count:\\t$count\\n\";}","  }","  close($writer);","}","############################## equals ##############################","sub equals{","\tmy $obj1=shift();","\tmy $obj2=shift();","\tmy $ref1=ref($obj1);","\tmy $ref2=ref($obj2);","\tif($ref1 ne $ref2){return;}","\tif($ref1 eq \"ARRAY\"){","\t\tmy $len1=scalar(@{$obj1});","\t\tmy $len2=scalar(@{$obj2});","\t\tif($len1!=$len2){return;}","\t\tfor(my $i=0;$i<$len1;$i++){if(!equals($obj1->[$i],$obj2->[$i])){return;}}","\t\treturn 1;","\t}elsif($ref1 eq \"HASH\"){","\t\tmy @keys1=keys(%{$obj1});","\t\tmy @keys2=keys(%{$obj2});","\t\tmy $len1=scalar(@keys1);","\t\tmy $len2=scalar(@keys2);","\t\tif($len1!=$len2){return;}","\t\tforeach my $key(@keys1){","\t\t\tif(!exists($obj2->{$key})){return;}","\t\t\tmy $val1=$obj1->{$key};","\t\t\tmy $val2=$obj2->{$key};","\t\t\tif(!equals($val1,$val2)){return;}","\t\t}","\t\treturn 1;","\t}","\tif($obj1 eq $obj2){return 1;}","}","############################## getDate ##############################","sub getDate{","\tmy $delim=shift();","\tmy $time=shift();","\tif(!defined($delim)){$delim=\"\";}","\tif(!defined($time)||$time eq \"\"){$time=localtime();}","\telse{$time=localtime($time);}","\tmy $year=$time->year+1900;","\tmy $month=$time->mon+1;","\tif($month<10){$month=\"0\".$month;}","\tmy $day=$time->mday;","\tif($day<10){$day=\"0\".$day;}","\treturn $year.$delim.$month.$delim.$day;","}","############################## listFiles ##############################","sub listFiles{","\tmy @input_directories=@_;","\tmy $file_suffix=shift(@input_directories);","\tmy @input_files=();","\tforeach my $input_directory (@input_directories){","\t\t$input_directory=absolutePath($input_directory);","\t\tif(-f $input_directory){push(@input_files,$input_directory);next;}","\t\telsif(-l $input_directory){push(@input_files,$input_directory);next;}","\t\topendir(DIR,$input_directory);","\t\tforeach my $file(readdir(DIR)){","\t\t\tif($file eq \".\"){next;}","\t\t\tif($file eq \"..\") {next;}","\t\t\tif($file eq \"\"){next;}","\t\t\t$file=\"$input_directory/$file\";","\t\t\tif(-d $file){next;}","\t\t\telsif($file!~/$file_suffix$/){next;}","\t\t\tpush(@input_files,$file);","\t\t}","\t\tclosedir(DIR);","\t}","\treturn sort(@input_files);","}","############################## mkdirs ##############################","sub mkdirs{","\tmy @directories=@_;","\tforeach my $directory(@directories){","\t\tif(-d $directory){next;}","\t\tmy @tokens=split(/[\\/\\\\]/,$directory);","\t\tif(($tokens[0] eq \"\")&&(scalar(@tokens)>1)){","\t\t\tshift(@tokens);","\t\t\tmy $token=shift(@tokens);","\t\t\tunshift(@tokens,\"/$token\");","\t\t}","\t\tmy $string=\"\";","\t\tforeach my $token(@tokens){","\t\t\t$string.=(($string eq \"\")?\"\":\"/\").$token;","\t\t\tif(-d $string){next;}","\t\t\tif(!mkdir($string)){return 0;}","\t\t}","\t}","\treturn 1;","}","############################## nextLine ##############################","sub nextLine{","  my $reader=shift();","  my $in=$reader->[0];","  my $prev=$reader->[1];","  if(eof($in)){","    close($in);","    $reader->[0]=undef;","    $reader->[1]=[];","  }else{","    my $line=<$in>;","    chomp($line);","    my @tokens=split(/\\t/,$line);","    $reader->[1]=\\@tokens;","  }","}","############################## nextTable ##############################","sub nextTable{","  my @readers=@_;","  my $writer=shift(@readers);","  my $currentChr;","  my $currentPos;","  foreach my $reader(@readers){","    if(!defined($reader->[0])){next;}","    my ($chr,$pos,$na,$ref,$alt,$ins,$del)=@{$reader->[1]};","    if(!defined($currentChr)||($chr cmp $currentChr)<0){$currentChr=$chr;$currentPos=$pos;}","    elsif(($chr eq $currentChr)&&($pos<$currentPos)){$currentPos=$pos;}","  }","  if(!defined($currentChr)){return 0;}","  my $line=\"$currentChr\\t$currentPos\";","  foreach my $reader(@readers){","    if(!defined($reader->[0])){$line.=\"\\t0\";next;}","    my ($chr,$pos,$flag)=@{$reader->[1]};","    if($chr ne $currentChr||$pos != $currentPos){$line.=\"\\t0\";next;}","    $line.=\"\\t$flag\";","    nextLine($reader);","  }","  print $writer \"$line\\n\";","  return 1;","}","############################## openFile ##############################","sub openFile{","\tmy $path=shift();","\tif($path=~/^(.+\\@.+)\\:(.+)$/){","\t\tif($path=~/\\.gz(ip)?$/){return IO::File->new(\"ssh $1 'gzip -cd $2'|\");}","\t\telsif($path=~/\\.bz(ip)?2$/){return IO::File->new(\"ssh $1 'bzip2 -cd $2'|\");}","\t\telsif($path=~/\\.bam$/){return IO::File->new(\"ssh $1 'samtools view $2'|\");}","\t\telse{return IO::File->new(\"ssh $1 'cat $2'|\");}","\t}else{","\t\tif($path=~/\\.gz(ip)?$/){return IO::File->new(\"gzip -cd $path|\");}","\t\telsif($path=~/\\.bz(ip)?2$/){return IO::File->new(\"bzip2 -cd $path|\");}","\t\telsif($path=~/\\.bam$/){return IO::File->new(\"samtools view $path|\");}","\t\telse{return IO::File->new($path);}","\t}","}","############################## openTable ##############################","sub openTable{","  my $file=shift();","  my $reader=IO::File->new($file);","  my $line=<$reader>;","  chomp($line);","  my @tokens=split(/\\t/,$line);","  return [$reader,\\@tokens];","}","############################## parseAVINPUT ##############################","sub parseAVINPUT{","  my $basename=shift();","  my $threshold=shift();","  my $reader=shift();","  my $writers=shift();","  my $splitFiles=shift();","  my $previous_chr;","  while(<$reader>){","     if(/^#/){next;}#skip comment","    chomp();#remove \\n","    my ($chr,$start,$end,$ref,$alt,$type,$score,$qual,$chr2,$start2,$id,$ref2,$alt2,$score2,$qual2,$info,$format,$na)=split(/\\t/);","    if($chr!~/^chr/){$chr=\"chr$chr\";}#add chr","    elsif($chr=~/^CHR(.+)$/i){$chr=\"chr$1\";}#lowercase","    if($chr eq \"chrMT\"){$chr=\"chrM\";}#handle mitochondria","    my ($a,$b)=split(/[:\\|\\/]/,$na);#example: 0/1,1/1,1/2","    if($a eq \".\"){$a=0;}#./2 => 0/2","    if($b eq \".\"){$b=0;}#1/. => 1/0, just in case","    my $flag=0;","    if($a==0&&$b==0){next;}#wild","    elsif($a==$b&&$a>0){$flag=2;}#homo","    else{$flag=1;}#het","    if($alt eq \"-\"){$alt=\".\";}","    elsif($alt eq \"0\"){$alt=\"\";for(my $i=$start;$i<=$end;$i++){$alt.=\".\";}}","    if($ref eq \"-\"){$ref=\".\";}","    elsif($ref eq \"0\"){$ref=\"\";for(my $i=$start;$i<=$end;$i++){$ref.=\".\";}}","    my $multiCount=$alt=~tr/,//;#A,B,C=>3, but haven't seen this happen","    if($multiCount<$b){$multiCount=$b;}#1/2=>2, 3/3=>3, 3/4=>4","    if($multiCount>1){$flag+=16;}#multi allelic","    my $c1=length($alt);# 'TTT'=>3","    my $c2=length($ref);# 'AA'=>2 '.'=>1","    if($c1<$c2){$flag+=4;}#deletion","    elsif($c1>$c2){$flag+=8;}#insertion","    elsif($alt eq \".\" && $ref ne \".\"){$flag+=4;}","    elsif($ref eq \".\" && $alt ne \".\"){$flag+=8;}","    if($qual eq \"PASS\"||$qual2 eq \"PASS\"){}","    elsif($qual=~/^\\d+$/){if($qual<$threshold){$flag+=32;}}","    if(!defined($previous_chr)||$previous_chr ne $chr){#new chromosome","      if(exists($writers->{$previous_chr})){close($writers->{$previous_chr});}#close","      if(exists($splitFiles->{$chr}->{$basename})){#append to already existing file","        my $tmpfile=$splitFiles->{$chr}->{$basename};","        $writers->{$chr}=IO::File->new(\">>$tmpfile\");","      }else{#crete new temporary writer","        my ($fh,$tmpfile)=tempfile(DIR=>$tmpDir,TEMPLATE=>\"$basename.$chr.XXXXXX\",SUFFIX=>\".txt\");","        $writers->{$chr}=$fh;","        if(!exists($splitFiles->{$chr})){$splitFiles->{$chr}={};}","        $splitFiles->{$chr}->{$basename}=$tmpfile;","      }","      $previous_chr=$chr;#update chromosome","    }","    my $writer=$writers->{$chr};#current writer","    print $writer \"$chr\\t$start\\t$flag\\n\";#write","  }","  if(exists($writers->{$previous_chr})){close($writers->{$previous_chr});}#close last writer","}","############################## parseGVCF ##############################","sub parseGVCF{","  my $basename=shift();","  my $threshold=shift();","  my $reader=shift();","  my $writers=shift();","  my $splitFiles=shift();","  my $previous_chr;","  while(<$reader>){","    chomp;","    if(/^#/){}","    #CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\tPt2402_BL1811.Bt07","    my ($chr,$pos,$id,$ref,$alt,$qual,$filter,$info,$format,$na)=split(/\\t/);","    if($chr!~/^chr/){$chr=\"chr$chr\";}","    elsif($chr=~/^CHR(.+)$/i){$chr=\"chr$1\";}","    if($chr eq \"chrMT\"){$chr=\"chrM\";}","    my ($a,$b)=split(/[:\\|\\/]/,$na);","    if($a eq \".\"){$a=0;}","    if($b eq \".\"){$b=0;}","    my $flag=0;","    if($a==0&&$b==0){next;}#wild","    elsif($a==$b&&$a>0){$flag=2;}#homo","    else{$flag=1;}#het","    $alt=~s/\\,?\\<NON_REF\\>//g;","    my $multiCount=$alt=~tr/,//;#A,B,C=>3, but haven't seen this happen","    if($multiCount<$b){$multiCount=$b;}#1/2=>2, 3/3=>3, 3/4=>4","    if($multiCount>1){$flag+=16;}#multi allelic","    my $c1=length($alt);","    my $c2=length($ref);# 'AA'=>2 '.'=>1","    if($c1<$c2){$flag+=4;}","    elsif($c1>$c2){$flag+=8;}","    elsif($alt eq \".\" && $ref ne \".\"){$flag+=4;}","    elsif($ref eq \".\" && $alt ne \".\"){$flag+=8;}","    if($qual eq \"PASS\"){}","    elsif($qual=~/^\\d+$/){if($qual<$threshold){$flag+=32;}}","    if(!defined($previous_chr)||$previous_chr ne $chr){","      if(exists($writers->{$previous_chr})){close($writers->{$previous_chr});}","      if(exists($splitFiles->{$chr}->{$basename})){","        my $tmpfile=$splitFiles->{$chr}->{$basename};","        $writers->{$chr}=IO::File->new(\">>$tmpfile\");","      }else{","        my ($fh,$tmpfile)=tempfile(DIR=>$tmpDir,TEMPLATE=>\"$basename.$chr.XXXXXX\",SUFFIX=>\".txt\");","        $writers->{$chr}=$fh;","        if(!exists($splitFiles->{$chr})){$splitFiles->{$chr}={};}","        $splitFiles->{$chr}->{$basename}=$tmpfile;","      }","    }","    $previous_chr=$chr;","    my $writer=$writers->{$chr};","    print $writer \"$chr\\t$pos\\t$flag\\n\";","  }","  if(exists($writers->{$previous_chr})){close($writers->{$previous_chr});}","}","############################## parseMultiVCF ##############################","sub parseMultiVCF{","  my $tableFile=shift();","  my $file=shift();","  my $reader=openFile($file);","  my @samples=();","  while(<$reader>){","    if(/^##/){next;}","    if(/^#/){","      chomp;","      my @tokens=split(/\\t/);","      @samples=splice(@tokens,9);","      last;","    }","  }","  my $writer=IO::File->new(\">$tableFile\");","  print $writer \"#chromosome\\tposition\\t\".join(\"\\t\",@samples).\"\\n\";","  while(<$reader>){","    chomp;","    #CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\tNA18939","    my ($chr,$pos,$id,$ref,$alt,$qual,$filter,$info,$format,@nas)=split(/\\t/);","    if($chr!~/^chr/){$chr=\"chr$chr\";}","    elsif($chr=~/^CHR(.+)$/i){$chr=\"chr$1\";}","    if($chr eq \"chrMT\"){$chr=\"chrM\";}","    my @flags=();","    my $printFlag=0;","    foreach my $na(@nas){","      my ($a,$b)=split(/[:\\|\\/]/,$na);","      if($a eq \".\"){$a=0;}","      if($b eq \".\"){$b=0;}","      my $flag=0;","      if($a==0&&$b==0){}#wild","      elsif($a==$b&&$a>0){$flag=2;}#homo","      else{$flag=1;}#het","      my $multiCount=$alt=~tr/,//;#A,B,C=>3, but haven't seen this happen","      if($multiCount<$b){$multiCount=$b;}#1/2=>2, 3/3=>3, 3/4=>4","      if($multiCount>1){$flag+=16;}#multi allelic","      my $c1=length($alt);","      my $c2=length($ref);# 'AA'=>2 '.'=>1","      if($c1<$c2){$flag+=4;}","      elsif($c1>$c2){$flag+=8;}","      elsif($alt eq \".\" && $ref ne \".\"){$flag+=4;}","      elsif($ref eq \".\" && $alt ne \".\"){$flag+=8;}","      if($qual eq \"PASS\"){}","      elsif($qual=~/^\\d+$/){if($qual<$threshold){$flag+=32;}}","      push(@flags,$flag);","      if($flag>0){$printFlag=1;}","    }","    if($printFlag){print $writer \"$chr\\t$pos\\t\".join(\"\\t\",@flags).\"\\n\";}","  }","  close($reader);","  close($writer);","}","############################## parseVCF ##############################","sub parseVCF{","  my $basename=shift();","  my $threshold=shift();","  my $reader=shift();","  my $writers=shift();","  my $splitFiles=shift();","  my $previous_chr;","   while(<$reader>){","    if(/^#/){next;}","    chomp;","    #CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\tNA18939","    my ($chr,$pos,$id,$ref,$alt,$qual,$filter,$info,$format,$na)=split(/\\t/);","    if($chr!~/^chr/){$chr=\"chr$chr\";}","    elsif($chr=~/^CHR(.+)$/i){$chr=\"chr$1\";}","    if($chr eq \"chrMT\"){$chr=\"chrM\";}","    my ($a,$b)=split(/[:\\|\\/]/,$na);","    if($a eq \".\"){$a=0;}","    if($b eq \".\"){$b=0;}","    my $flag=0;","    if($a==0&&$b==0){next;}#wild","    elsif($a==$b&&$a>0){$flag=2;}#homo","    else{$flag=1;}#het","    my $multiCount=$alt=~tr/,//;#A,B,C=>3, but haven't seen this happen","    if($multiCount<$b){$multiCount=$b;}#1/2=>2, 3/3=>3, 3/4=>4","    if($multiCount>1){$flag+=16;}#multi allelic","    my $c1=length($alt);","    my $c2=length($ref);# 'AA'=>2 '.'=>1","    if($c1<$c2){$flag+=4;}","    elsif($c1>$c2){$flag+=8;}","    elsif($alt eq \".\" && $ref ne \".\"){$flag+=4;}","    elsif($ref eq \".\" && $alt ne \".\"){$flag+=8;}","    if($qual eq \"PASS\"){}","    elsif($qual=~/^\\d+$/){if($qual<$threshold){$flag+=32;}}","    if(!defined($previous_chr)||$previous_chr ne $chr){","      if(exists($writers->{$previous_chr})){close($writers->{$previous_chr});}","      if(exists($splitFiles->{$chr}->{$basename})){","        my $tmpfile=$splitFiles->{$chr}->{$basename};","        $writers->{$chr}=IO::File->new(\">>$tmpfile\");","      }else{","        my ($fh,$tmpfile)=tempfile(DIR=>$tmpDir,TEMPLATE=>\"$basename.$chr.XXXXXX\",SUFFIX=>\".txt\");","        $writers->{$chr}=$fh;","        if(!exists($splitFiles->{$chr})){$splitFiles->{$chr}={};}","        $splitFiles->{$chr}->{$basename}=$tmpfile;","      }","      $previous_chr=$chr;","    }","    my $writer=$writers->{$chr};","    print $writer \"$chr\\t$pos\\t$flag\\n\";","  }","  if(exists($writers->{$previous_chr})){close($writers->{$previous_chr});}","}","############################## printTable ##############################","sub printTable{","\tmy @out=@_;","\tmy $return_type=$out[0];","\tif(lc($return_type) eq \"print\"){$return_type=0;shift(@out);}","\telsif(lc($return_type) eq \"array\"){$return_type=1;shift(@out);}","\telsif(lc($return_type) eq \"stderr\"){$return_type=2;shift(@out);}","\telse{$return_type= 2;}","\tprintTableSub($return_type,\"\",@out);","}","sub printTableSub{","\tmy @out=@_;","\tmy $return_type=shift(@out);","\tmy $string=shift(@out);","\tmy @output=();","\tfor(@out){","\t\tif(ref( $_ ) eq \"ARRAY\"){","\t\t\tmy @array=@{$_};","\t\t\tmy $size=scalar(@array);","\t\t\tif($size==0){","\t\t\t\tif($return_type==0){print $string.\"[]\\n\";}","\t\t\t\telsif($return_type==1){push(@output,$string.\"[]\");}","\t\t\t\telsif($return_type==2){print STDERR $string.\"[]\\n\";}","\t\t\t}else{","\t\t\t\tfor(my $i=0;$i<$size;$i++){push(@output,printTableSub($return_type,$string.\"[$i]=>\\t\",$array[$i]));}","\t\t\t}","\t\t} elsif(ref($_)eq\"HASH\"){","\t\t\tmy %hash=%{$_};","\t\t\tmy @keys=sort{$a cmp $b}keys(%hash);","\t\t\tmy $size=scalar(@keys);","\t\t\tif($size==0){","\t\t\t\tif($return_type==0){print $string.\"{}\\n\";}","\t\t\t\telsif($return_type==1){push( @output,$string.\"{}\");}","\t\t\t\telsif($return_type==2){print STDERR $string.\"{}\\n\";}","\t\t\t}else{","\t\t\t\tforeach my $key(@keys){push(@output,printTableSub($return_type,$string.\"{$key}=>\\t\",$hash{$key}));}","\t\t\t}","\t\t}elsif($return_type==0){print \"$string\\\"$_\\\"\\n\";}","\t\telsif($return_type==1){push( @output,\"$string\\\"$_\\\"\");}","\t\telsif($return_type==2){print STDERR \"$string\\\"$_\\\"\\n\";}","\t}","\treturn wantarray?@output:$output[0];","}","############################## readText ##############################","sub readText{","\tmy $file=shift();","\tmy $text=\"\";","\topen(IN,$file);","\twhile(<IN>){s/\\r//g;$text.=$_;}","\tclose(IN);","\treturn $text;","}","############################## sortSubs ##############################","sub sortSubs{","\tmy $path=\"$program_directory/$program_name\";","\tmy $reader=openFile($path);","\tmy @headers=();","\tmy $name;","\tmy $blocks={};","\tmy $block=[];","\tmy $date=getDate(\"/\");","\tmy @orders=();","\twhile(<$reader>){","\t\tchomp;s/\\r//g;","\t\tif(/^#{30}\\s*(\\S+)\\s*#{30}$/){","\t\t\t$name=$1;","\t\t\tif($name!~/^[A-Z]+$/){push(@{$block},$_);last;}","\t\t}elsif(/^my \\$program_version=\\\"\\S+\\\";/){$_=\"my \\$program_version=\\\"$date\\\";\";}","\t\tpush(@headers,$_);","\t}","\twhile(<$reader>){","\t\tchomp;s/\\r//g;","\t\tif(/^#{30}\\s*(\\S+)\\s*#{30}$/){","\t\t\t$blocks->{$name}=$block;","\t\t\tpush(@orders,$name);","\t\t\t$name=$1;","\t\t\t$block=[];","\t\t}","\t\tpush(@{$block},$_);","\t}","\tclose($reader);","\tif(defined($name)){$blocks->{$name}=$block;push(@orders,$name);}","\tmy ($writer,$file)=tempfile(DIR=>\"/tmp\",SUFFIX=>\".pl\");","\tforeach my $line(@headers){print $writer \"$line\\n\";}","\tforeach my $key(sort{$a cmp $b}@orders){foreach my $line(@{$blocks->{$key}}){print $writer \"$line\\n\";}}","\tclose($writer);","\treturn system(\"mv $file $path\");","}","############################## splitInputs ##############################","sub splitInputs{","  my @inFiles=@_;","  my $tmpDir=shift(@inFiles);","  my $threshold=shift(@inFiles);","  my @basenames=();","  my $splitFiles={};","  my $chrHash={};","  if(!defined($opt_q)){foreach my $inFile(@inFiles){print STDERR \"#Input file: $inFile\\n\";}}","  foreach my $inFile(@inFiles){","    my $reader;","    my $basename;","    if($inFile=~/^(.+)\\.g(ip)?z$/i){$basename=$1;$reader=IO::File->new(\"gzip -cd $inFile|\");}","    elsif($inFile=~/^(.+)\\.b(ip)?z2$/i){$basename=$1;$reader=IO::File->new(\"bzip2 -cd $inFile|\");}","    elsif($inFile=~/^(.+)\\.bcf$/i){$basename=$1;$reader=IO::File->new(\"bcftools view $inFile|\");}","    else{$basename=$inFile;$reader=IO::File->new($inFile);}","    my $type;","    if($basename=~/^(.+)\\.g\\.vcf$/i){$type=\"gvcf\";$basename=$1;}","    elsif($basename=~/^(.+)\\.vcf$/i){$type=\"vcf\";$basename=$1;}","    elsif($basename=~/^(.+)\\.bcf$/i){$type=\"vcf\";$basename=$1;}","    elsif($basename=~/^(.+)\\.avinput$/i){$type=\"avinput\";$basename=$1;}","    $basename=basename($basename);","    push(@basenames,basename($basename));","    my $writers={};","    if($type eq \"vcf\"){parseVCF($basename,$threshold,$reader,$writers,$splitFiles);}","    elsif($type eq \"gvcf\"){parseGVCF($basename,$threshold,$reader,$writers,$splitFiles);}","    elsif($type eq \"avinput\"){parseAVINPUT($basename,$threshold,$reader,$writers,$splitFiles);}","    close($reader);","    foreach my $chr(keys(%{$writers})){","      $chrHash->{$chr}=1;","      my $tmpfile=$splitFiles->{$chr}->{$basename};","      my ($fh,$tmpfile2)=tempfile(DIR=>$tmpDir,TEMPLATE=>\"$basename.$chr.sort.XXXXXX\",SUFFIX=>\".txt\");","      close($fh);","      if(!defined($opt_q)){print STDERR \"#Sorting file: $tmpfile2\\n\";}","      system(\"sort -k2,2n $tmpfile>$tmpfile2\");","      unlink($tmpfile);","      $splitFiles->{$chr}->{$basename}=$tmpfile2;","    }","  }","  my @chromosomes=sort{$a cmp $b}keys(%{$chrHash});","  return ($splitFiles,\\@chromosomes,\\@basenames);","}","############################## splitVCFLine ##############################","sub splitVCFLine{","  my $line=shift();","  my $threshold=shift();","  my ($chr,$pos,$id,$ref,$alt,$qual,$filter,$info,$format,$na)=split(/\\t/,$line);","  if($chr!~/^chr/){$chr=\"chr$chr\";}","  elsif($chr=~/^CHR(.+)$/i){$chr=\"chr$1\";}","  if($chr eq \"chrMT\"){$chr=\"chrM\";}","  my ($a,$b)=split(/[:\\|\\/]/,$na);","  if($a eq \".\"){$a=0;}","  if($b eq \".\"){$b=0;}","  my $flag=0;","  if($a==$b&&$a>0){$flag=2;}#homo","  elsif($a==0&&$b==0){$flag=0;}#wild","  else{$flag=1;}#het","  my $count=$alt=~tr/,//;#A,B,C A,B=>3","  if($count>0){$flag+=16;}#multi allelic","  my $c1=length($alt);","  my $c2=length($ref);# 'AA' => 2 '.'=>1","  if($c1<$c2){$flag+=4;}","  elsif($c1>$c2){$flag+=8;}","  elsif($alt eq \".\" && $ref ne \".\"){$flag+=4;}","  elsif($ref eq \".\" && $alt ne \".\"){$flag+=8;}","  if($qual eq \"PASS\"){}","  elsif($qual=~/^\\d+$/){if($qual<$threshold){$flag+=32;}}","  return ($chr,$pos,$flag);","}","############################## test ##############################","sub test{","  mkdirs(\"test\");","  createFile(","    \"test/input1.avinput\",","    \"chr1\t10440\t10440\tC\t-\thom\t24.08\t3\tchr1\t10439\trs112766696\tAC\tA\t24.08\tPASS\tAC=2;AF=0.077;AN=26;BaseQRankSum=-4.310e-01;ClippingRankSum=0.00;DB;DP=72;ExcessHet=0.1703;FS=0.000;InbreedingCoeff=0.0754;MLEAC=2;MLEAF=0.077;MQ=15.37;MQRankSum=-9.670e-01;QD=8.03;ReadPosRankSum=0.967;SOR=0.223\tGT:AD:DP:FT:GQ:PL\t1/1:1,2:3:LowDP:4:64,4,0\",","    \"chr1\t15903\t15903\t-\tC\thom\t4945.94\t3\tchr1\t15903\trs557514207\tG\tGC\t4945.94\tPASS\tAC=40;AF=0.870;AN=46;BaseQRankSum=-7.920e-01;ClippingRankSum=0.00;DB;DP=259;ExcessHet=0.0087;FS=24.539;InbreedingCoeff=0.6275;MLEAC=42;MLEAF=0.913;MQ=7.50;MQRankSum=0.00;QD=34.24;ReadPosRankSum=0.674;SOR=3.585\tGT:AD:DP:FT:GQ:PL\t1/1:0,3:3:LowDP:9:107,9,0\",","    \"chr1\t20317\t20317\tA\t-\thet\t3958.34\t38\tchr1\t20316\t.\tGA\tG\t3958.34\tPASS\tAC=16;AF=0.348;AN=46;BaseQRankSum=-1.090e-01;ClippingRankSum=0.00;DP=984;ExcessHet=20.9140;FS=0.000;InbreedingCoeff=-0.5274;MLEAC=16;MLEAF=0.348;MQ=7.48;MQRankSum=-9.310e-01;QD=5.54;ReadPosRankSum=-4.720e-01;SOR=0.703\tGT:AD:DP:GQ:PL\t0/1:23,15:38:99:320,0,587\",","    \"chr1\t81447\t81447\tA\tG\thet\t492.85\t41\tchr1\t81447\t.\tA\tG\t492.85\tPASS\tAC=1;AF=0.022;AN=46;BaseQRankSum=1.42;ClippingRankSum=0.00;DP=810;ExcessHet=3.0103;FS=0.000;InbreedingCoeff=-0.0223;MLEAC=1;MLEAF=0.022;MQ=44.01;MQRankSum=-1.032e+00;QD=12.02;ReadPosRankSum=0.450;SOR=0.616\tGT:AD:DP:FT:GQ:PL\t0/1:21,20:41:PASS:99:530,0,571\",","    \"chr1\t82136\t82137\tAA\t-\thet\t13691.92\t22\tchr1\t82133\t.\tCAAAA\tCAA\t13691.92\tPASS\tAC=11,27,6;AF=0.239,0.587,0.130;AN=46;BaseQRankSum=1.70;ClippingRankSum=0.00;DP=635;ExcessHet=3.1079;FS=1.124;InbreedingCoeff=-0.0403;MLEAC=11,25,6;MLEAF=0.239,0.543,0.130;MQ=10.37;MQRankSum=0.260;QD=26.69;ReadPosRankSum=0.805;SOR=0.878\tGT:AD:DP:FT:GQ:PL\t2/3:0,0,10,12:22:PASS:99:766,694,676,325,322,261,268,283,0,255\",","    \"chr1\t95011\t95011\t-\tG\thet\t1320.14\t40\tchr1\t95011\t.\tT\tTG\t1320.14\tPASS\tAC=7,2;AF=0.152,0.043;AN=46;BaseQRankSum=1.10;ClippingRankSum=0.00;DP=777;ExcessHet=7.2151;FS=1.793;InbreedingCoeff=-0.2425;MLEAC=6,2;MLEAF=0.130,0.043;MQ=19.55;MQRankSum=-4.795e+00;QD=4.26;ReadPosRankSum=0.999;SOR=0.866\tGT:AD:DP:GQ:PGT:PID:PL\t0/1:34,6,0:40:99:0|1:94986_C_T:150,0,2303,252,2321,2573\",","    \"chr1\t104160\t104160\t-\tACAC\thet\t11577.69\t19\tchr1\t104160\trs372078516\tA\tAACAC\t11577.69\tPASS\tAC=26,16;AF=0.565,0.348;AN=46;BaseQRankSum=-1.490e-01;ClippingRankSum=0.00;DB;DP=584;ExcessHet=3.1125;FS=50.214;InbreedingCoeff=0.1776;MLEAC=24,13;MLEAF=0.522,0.283;MQ=7.79;MQRankSum=-1.549e+00;QD=29.00;ReadPosRankSum=0.942;SOR=5.670\tGT:AD:DP:FT:GQ:PL\t1/2:3,8,7:19:PASS:99:581,166,257,225,0,358\",","    \"chr1\t790136\t790136\tA\tG\thet\t5687.30\t10\tchr1\t790136\trs6696240\tA\tG\t5687.30\tPASS\tAC=5,7,2,5;AF=0.109,0.152,0.043,0.109;AN=46;BaseQRankSum=0.269;ClippingRankSum=0.00;DB;DP=590;ExcessHet=51.2979;FS=7.965;InbreedingCoeff=-0.7242;MLEAC=5,7,2,5;MLEAF=0.109,0.152,0.043,0.109;MQ=13.39;MQRankSum=0.00;QD=20.10;ReadPosRankSum=0.693;SOR=0.799\tGT:AD:DP:FT:GQ:PGT:PID:PL\t0/2:5,0,5,0,0:10:PASS:99:.:.:307,262,605,0,327,310,262,605,327,605,262,605,327,605,605\",","    \"chr1\t791101\t791101\tT\tG\thom\t22194.47\t23\tchr1\t791101\trs3131980\tT\tG\t22194.47\tPASS\tAC=41,5;AF=0.891,0.109;AN=46;BaseQRankSum=1.02;ClippingRankSum=0.00;DB;DP=679;ExcessHet=3.0103;FS=0.000;InbreedingCoeff=0.0000;MLEAC=41,5;MLEAF=0.891,0.109;MQ=12.26;MQRankSum=0.00;QD=34.90;ReadPosRankSum=2.02;SOR=0.526\tGT:AD:DP:GQ:PGT:PID:PL\t1/1:0,23,0:23:69:.:.:741,69,0,741,69,741\",","    \"chr1\t822428\t822498\tCCTGGCCAGCAGATCCACCCTGTCTATACTACCTGCCTGGCCAGCAGATCCACCCTGTCTATACTACCTGA\t0\thom\t18262.34\t25\tchr1\t822428\t.\tCCTGGCCAGCAGATCCACCCTGTCTATACTACCTGCCTGGCCAGCAGATCCACCCTGTCTATACTACCTGA\t0\t18262.34\tPASS\tAC=1,37;AF=0.022,0.804;AN=46;BaseQRankSum=0.00;ClippingRankSum=0.00;DP=838;ExcessHet=6.1884;FS=2.276;InbreedingCoeff=-0.2105;MLEAC=1,37;MLEAF=0.022,0.804;MQ=8.79;MQRankSum=0.00;QD=29.74;ReadPosRankSum=-7.330e-01;SOR=0.870\tGT:AD:DP:GQ:PL\t2/2:0,0,25:25:78:1022,1022,1022,78,78,0\",","    \"chr1\t840411\t840411\tA\t-\thom\t14651.44\t22\tchr1\t840409\trs755461528\tTAA\tTA\t14651.44\tPASS\tAC=9,8,29;AF=0.196,0.174,0.630;AN=46;BaseQRankSum=-4.920e-01;ClippingRankSum=0.00;DB;DP=775;ExcessHet=3.0103;FS=0.000;InbreedingCoeff=0.0007;MLEAC=8,7,29;MLEAF=0.174,0.152,0.630;MQ=11.74;MQRankSum=-3.780e-01;QD=21.33;ReadPosRankSum=0.406;SOR=0.722\tGT:AD:DP:GQ:PL\t3/3:0,0,0,22:22:65:463,463,463,463,463,463,65,65,65,0\",","    \"chr1\t984611\t984611\t-\tT\thom\t19540.64\t12\tchr1\t984611\t.\tCTTAT\tCTTTAT\t19540.64\tPASS\tAC=3,32,1,2,3,2;AF=0.065,0.696,0.022,0.043,0.065,0.043;AN=46;BaseQRankSum=1.37;ClippingRankSum=0.00;DP=526;ExcessHet=3.3099;FS=1.943;InbreedingCoeff=-0.0688;MLEAC=3,32,1,2,3,2;MLEAF=0.065,0.696,0.022,0.043,0.065,0.043;MQ=12.55;MQRankSum=0.00;QD=26.25;ReadPosRankSum=0.199;SOR=0.647\tGT:AD:DP:FT:GQ:PGT:PID:PL\t2/2:0,0,12,0,0,0,0:12:PASS:39:1|1:984611_C_CT:584,585,585,39,39,0,585,585,39,585,585,585,39,585,585,585,585,39,585,585,585,585,585,39,585,585,585,585\",","","    \"chr1\t1010440\t1010440\tC\t-\thom\t24.08\t3\tchr1\t1010439\trs112766696\tAC\tA\t24.08\t10\tAC=2;AF=0.077;AN=26;BaseQRankSum=-4.310e-01;ClippingRankSum=0.00;DB;DP=72;ExcessHet=0.1703;FS=0.000;InbreedingCoeff=0.0754;MLEAC=2;MLEAF=0.077;MQ=15.37;MQRankSum=-9.670e-01;QD=8.03;ReadPosRankSum=0.967;SOR=0.223\tGT:AD:DP:FT:GQ:PL\t1/1:1,2:3:LowDP:4:64,4,0\",","    \"chr1\t1015903\t1015903\t-\tC\thom\t4945.94\t3\tchr1\t1015903\trs557514207\tG\tGC\t4945.94\t11\tAC=40;AF=0.870;AN=46;BaseQRankSum=-7.920e-01;ClippingRankSum=0.00;DB;DP=259;ExcessHet=0.0087;FS=24.539;InbreedingCoeff=0.6275;MLEAC=42;MLEAF=0.913;MQ=7.50;MQRankSum=0.00;QD=34.24;ReadPosRankSum=0.674;SOR=3.585\tGT:AD:DP:FT:GQ:PL\t1/1:0,3:3:LowDP:9:107,9,0\",","    \"chr1\t1020317\t1020317\tA\t-\thet\t3958.34\t38\tchr1\t1020316\t.\tGA\tG\t3958.34\t12\tAC=16;AF=0.348;AN=46;BaseQRankSum=-1.090e-01;ClippingRankSum=0.00;DP=984;ExcessHet=20.9140;FS=0.000;InbreedingCoeff=-0.5274;MLEAC=16;MLEAF=0.348;MQ=7.48;MQRankSum=-9.310e-01;QD=5.54;ReadPosRankSum=-4.720e-01;SOR=0.703\tGT:AD:DP:GQ:PL\t0/1:23,15:38:99:320,0,587\",","    \"chr1\t1081447\t1081447\tA\tG\thet\t492.85\t41\tchr1\t1081447\t.\tA\tG\t492.85\t13\tAC=1;AF=0.022;AN=46;BaseQRankSum=1.42;ClippingRankSum=0.00;DP=810;ExcessHet=3.0103;FS=0.000;InbreedingCoeff=-0.0223;MLEAC=1;MLEAF=0.022;MQ=44.01;MQRankSum=-1.032e+00;QD=12.02;ReadPosRankSum=0.450;SOR=0.616\tGT:AD:DP:FT:GQ:PL\t0/1:21,20:41:PASS:99:530,0,571\",","    \"chr1\t1082136\t1082137\tAA\t-\thet\t13691.92\t22\tchr1\t1082133\t.\tCAAAA\tCAA\t13691.92\t14\tAC=11,27,6;AF=0.239,0.587,0.130;AN=46;BaseQRankSum=1.70;ClippingRankSum=0.00;DP=635;ExcessHet=3.1079;FS=1.124;InbreedingCoeff=-0.0403;MLEAC=11,25,6;MLEAF=0.239,0.543,0.130;MQ=10.37;MQRankSum=0.260;QD=26.69;ReadPosRankSum=0.805;SOR=0.878\tGT:AD:DP:FT:GQ:PL\t2/3:0,0,10,12:22:PASS:99:766,694,676,325,322,261,268,283,0,255\",","    \"chr1\t1095011\t1095011\t-\tG\thet\t1320.14\t40\tchr1\t1095011\t.\tT\tTG\t1320.14\t15\tAC=7,2;AF=0.152,0.043;AN=46;BaseQRankSum=1.10;ClippingRankSum=0.00;DP=777;ExcessHet=7.2151;FS=1.793;InbreedingCoeff=-0.2425;MLEAC=6,2;MLEAF=0.130,0.043;MQ=19.55;MQRankSum=-4.795e+00;QD=4.26;ReadPosRankSum=0.999;SOR=0.866\tGT:AD:DP:GQ:PGT:PID:PL\t0/1:34,6,0:40:99:0|1:94986_C_T:150,0,2303,252,2321,2573\",","    \"chr1\t10104160\t10104160\t-\tACAC\thet\t11577.69\t19\tchr1\t10104160\trs372078516\tA\tAACAC\t11577.69\t16\tAC=26,16;AF=0.565,0.348;AN=46;BaseQRankSum=-1.490e-01;ClippingRankSum=0.00;DB;DP=584;ExcessHet=3.1125;FS=50.214;InbreedingCoeff=0.1776;MLEAC=24,13;MLEAF=0.522,0.283;MQ=7.79;MQRankSum=-1.549e+00;QD=29.00;ReadPosRankSum=0.942;SOR=5.670\tGT:AD:DP:FT:GQ:PL\t1/2:3,8,7:19:PASS:99:581,166,257,225,0,358\",","    \"chr1\t10790136\t10790136\tA\tG\thet\t5687.30\t10\tchr1\t10790136\trs6696240\tA\tG\t5687.30\t17\tAC=5,7,2,5;AF=0.109,0.152,0.043,0.109;AN=46;BaseQRankSum=0.269;ClippingRankSum=0.00;DB;DP=590;ExcessHet=51.2979;FS=7.965;InbreedingCoeff=-0.7242;MLEAC=5,7,2,5;MLEAF=0.109,0.152,0.043,0.109;MQ=13.39;MQRankSum=0.00;QD=20.10;ReadPosRankSum=0.693;SOR=0.799\tGT:AD:DP:FT:GQ:PGT:PID:PL\t0/2:5,0,5,0,0:10:PASS:99:.:.:307,262,605,0,327,310,262,605,327,605,262,605,327,605,605\",","    \"chr1\t10791101\t10791101\tT\tG\thom\t22194.47\t23\tchr1\t10791101\trs3131980\tT\tG\t22194.47\t18\tAC=41,5;AF=0.891,0.109;AN=46;BaseQRankSum=1.02;ClippingRankSum=0.00;DB;DP=679;ExcessHet=3.0103;FS=0.000;InbreedingCoeff=0.0000;MLEAC=41,5;MLEAF=0.891,0.109;MQ=12.26;MQRankSum=0.00;QD=34.90;ReadPosRankSum=2.02;SOR=0.526\tGT:AD:DP:GQ:PGT:PID:PL\t1/1:0,23,0:23:69:.:.:741,69,0,741,69,741\",","    \"chr1\t10822428\t10822498\tCCTGGCCAGCAGATCCACCCTGTCTATACTACCTGCCTGGCCAGCAGATCCACCCTGTCTATACTACCTGA\t0\thom\t18262.34\t25\tchr1\t10822428\t.\tCCTGGCCAGCAGATCCACCCTGTCTATACTACCTGCCTGGCCAGCAGATCCACCCTGTCTATACTACCTGA\t0\t18262.34\t19\tAC=1,37;AF=0.022,0.804;AN=46;BaseQRankSum=0.00;ClippingRankSum=0.00;DP=838;ExcessHet=6.1884;FS=2.276;InbreedingCoeff=-0.2105;MLEAC=1,37;MLEAF=0.022,0.804;MQ=8.79;MQRankSum=0.00;QD=29.74;ReadPosRankSum=-7.330e-01;SOR=0.870\tGT:AD:DP:GQ:PL\t2/2:0,0,25:25:78:1022,1022,1022,78,78,0\",","    \"chr1\t10840411\t10840411\tA\t-\thom\t14651.44\t22\tchr1\t10840409\trs755461528\tTAA\tTA\t14651.44\t20\tAC=9,8,29;AF=0.196,0.174,0.630;AN=46;BaseQRankSum=-4.920e-01;ClippingRankSum=0.00;DB;DP=775;ExcessHet=3.0103;FS=0.000;InbreedingCoeff=0.0007;MLEAC=8,7,29;MLEAF=0.174,0.152,0.630;MQ=11.74;MQRankSum=-3.780e-01;QD=21.33;ReadPosRankSum=0.406;SOR=0.722\tGT:AD:DP:GQ:PL\t3/3:0,0,0,22:22:65:463,463,463,463,463,463,65,65,65,0\",","    \"chr1\t10984611\t10984611\t-\tT\thom\t19540.64\t12\tchr1\t10984611\t.\tCTTAT\tCTTTAT\t19540.64\t21\tAC=3,32,1,2,3,2;AF=0.065,0.696,0.022,0.043,0.065,0.043;AN=46;BaseQRankSum=1.37;ClippingRankSum=0.00;DP=526;ExcessHet=3.3099;FS=1.943;InbreedingCoeff=-0.0688;MLEAC=3,32,1,2,3,2;MLEAF=0.065,0.696,0.022,0.043,0.065,0.043;MQ=12.55;MQRankSum=0.00;QD=26.25;ReadPosRankSum=0.199;SOR=0.647\tGT:AD:DP:FT:GQ:PGT:PID:PL\t2/2:0,0,12,0,0,0,0:12:PASS:39:1|1:984611_C_CT:584,585,585,39,39,0,585,585,39,585,585,585,39,585,585,585,585,39,585,585,585,585,585,39,585,585,585,585\",","  );","  testCommand(","    \"perl $program_directory/vcftable.pl -q test/input1.avinput\",","    \"#chromosome\tposition\tinput1\",","    \"chr1\t10440\t6\",","    \"chr1\t15903\t10\",  ","    \"chr1\t20317\t5\",","    \"chr1\t81447\t1\",","    \"chr1\t82136\t21\",","    \"chr1\t95011\t9\",","    \"chr1\t104160\t25\",","    \"chr1\t790136\t17\",","    \"chr1\t791101\t2\",","    \"chr1\t822428\t18\",","    \"chr1\t840411\t22\",","    \"chr1\t984611\t26\",","    \"chr1\t1010440\t38\",","    \"chr1\t1015903\t42\",","    \"chr1\t1020317\t37\",","    \"chr1\t1081447\t33\",","    \"chr1\t1082136\t53\",","    \"chr1\t1095011\t41\",","    \"chr1\t10104160\t57\",","    \"chr1\t10790136\t49\",","    \"chr1\t10791101\t34\",","    \"chr1\t10822428\t50\",","    \"chr1\t10840411\t54\",","    \"chr1\t10984611\t58\",","  );","  unlink(\"test/input1.avinput\");","","  createFile(","    \"test/input1.vcf\",","    \"#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\tNA18939\",","    \"1\t887560\tvar_452\tA\tC\t.\tPASS\tSVLEN=0;SVTYPE=SNP:SITE_CONF=110.65\tGT:COV:GT_CONF:GL\t0/1:3,9:8.37:-43.31,-8.99,-17.36\",","    \"1\t948921\tvar_803\tT\tC\t.\tPASS\tSVLEN=0;SVTYPE=SNP:SITE_CONF=134.03\tGT:COV:GT_CONF:GL\t1/1:0,13:9.01:-64.60,-16.09,-7.08\",","    \"1\t10887560\tvar_452\tAT\tC\t.\tPASS\tSVLEN=0;SVTYPE=SNP:SITE_CONF=110.65\tGT:COV:GT_CONF:GL\t0/1:3,9:8.37:-43.31,-8.99,-17.36\",","    \"1\t10948921\tvar_803\tT\tCA\t.\tPASS\tSVLEN=0;SVTYPE=SNP:SITE_CONF=134.03\tGT:COV:GT_CONF:GL\t1/1:0,13:9.01:-64.60,-16.09,-7.08\",","    \"1\t20887560\tvar_452\tAT\tC\t.\tPASS\tSVLEN=0;SVTYPE=SNP:SITE_CONF=110.65\tGT:COV:GT_CONF:GL\t1/3:3,9:8.37:-43.31,-8.99,-17.36\",","    \"1\t20948921\tvar_803\tT\tCA\t.\tPASS\tSVLEN=0;SVTYPE=SNP:SITE_CONF=134.03\tGT:COV:GT_CONF:GL\t2/2:0,13:9.01:-64.60,-16.09,-7.08\",","  );","  testCommand(","    \"perl $program_directory/vcftable.pl -q test/input1.vcf\",","    \"#chromosome\tposition\tinput1\",","    \"chr1\t887560\t1\",","    \"chr1\t948921\t2\",","    \"chr1\t10887560\t5\",","    \"chr1\t10948921\t10\",","    \"chr1\t20887560\t21\",","    \"chr1\t20948921\t26\",","  );","  unlink(\"test/input1.vcf\");","  system(","    \"perl $program_directory/vcftable.pl -q testdata/input/NA18939_v2.vcf testdata/input/NA18940_v2.vcf testdata/input/NA18941_v2.vcf testdata/input/NA18942_v2.vcf > test/table.txt\");","  rmdir(\"test\");","  testCommand(\"diff test/table.txt testdata/table.txt\",\"\");","}","############################## testCommand ##############################","sub testCommand{","\tmy @values=@_;","\tmy $command=shift(@values);","\tmy $value2=join(\"\\n\",@values);","\tmy ($writer,$file)=tempfile();","\tclose($writer);","\tif(system(\"$command > $file\")){","\t\tprint STDERR \">$command\\n\";","\t\tprint STDERR \"Command failed...\\n\";","\t\treturn 1;","\t}","\tmy $value1=readText($file);","\tchomp($value1);","\tif($value2 eq\"\"){if($value1 eq\"\"){return 0;}}","\tif($value1 eq $value2){return 0;}","\tprint STDERR \">$command\\n\";","\tprint STDERR \"$value1\\n\";","\tprint STDERR \"$value2\\n\";","}","############################## testSub ##############################","sub testSub{","\tmy $command=shift();","\tmy $value2=shift();","\tmy $value1=eval($command);","\tif(equals($value1,$value2)){return 0;}","  print STDERR \">$command\\n\";","\tprintTable($value1);","\tprintTable($value2);","}"],"https://moirai2.github.io/schema/daemon/script/name":"vcftable.pl"},"https://moirai2.github.io/schema/daemon/sleeptime":"60","https://moirai2.github.io/schema/daemon/userdefined":{"output":"$project/vcftable.txt"}}
